name: Factory Health Digest

on:
  schedule:
    # Runs Monday at 9:05 AM ET
    - cron: '5 14 * * 1'  # 14:05 UTC = 9:05 AM ET (accounting for DST)
  workflow_dispatch:
    inputs:
      post_to_issue:
        description: 'Post results to issue (true/false)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: read
  issues: write

jobs:
  health_check:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN }}
      ORG_LOGIN: ${{ secrets.ORG_LOGIN }}
      FACTORY_PROJECT_NUMBER: ${{ vars.FACTORY_PROJECT_NUMBER }}
      FACTORY_REPO: ${{ github.repository }}
    
    steps:
      - name: Check Factory configuration
        run: |
          if [[ -z "${{ vars.FACTORY_PROJECT_NUMBER }}" ]]; then
            echo "❌ FACTORY_PROJECT_NUMBER variable is not set"
            echo "Please set it in Settings → Variables"
            exit 1
          fi
          echo "✅ Factory project number: ${{ vars.FACTORY_PROJECT_NUMBER }}"
      
      - name: Query Factory project data
        id: factory_data
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const factoryNumber = parseInt(process.env.FACTORY_PROJECT_NUMBER, 10);
            const owner = process.env.ORG_LOGIN;
            
            console.log(`Querying Factory project ${factoryNumber} for ${owner}`);
            
            try {
              const query = `
                query($login: String!, $num: Int!) {
                  user(login: $login) {
                    projectV2(number: $num) {
                      id
                      title
                      fields(first: 50) {
                        nodes {
                          ... on ProjectV2Field {
                            id
                            name
                          }
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                      items(first: 100) {
                        totalCount
                        nodes {
                          id
                          fieldValues(first: 50) {
                            nodes {
                              ... on ProjectV2ItemFieldTextValue { 
                                text 
                                field { 
                                  ... on ProjectV2Field { 
                                    name 
                                  }
                                }
                              }
                              ... on ProjectV2ItemFieldNumberValue {
                                number
                                field {
                                  ... on ProjectV2Field {
                                    name
                                  }
                                }
                              }
                              ... on ProjectV2ItemFieldDateValue {
                                date
                                field {
                                  ... on ProjectV2Field {
                                    name
                                  }
                                }
                              }
                              ... on ProjectV2ItemFieldSingleSelectValue {
                                name
                                field {
                                  ... on ProjectV2Field {
                                    name
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const result = await github.graphql(query, {
                login: owner,
                num: factoryNumber
              });
              
              const project = result.user.projectV2;
              if (!project) {
                core.setFailed(`Factory project ${factoryNumber} not found`);
                return;
              }
              
              // Process the data
              const today = new Date();
              const items = project.items.nodes;
              
              // Group by Stage
              const stageGroups = {};
              const overdueStudies = [];
              const partnerStats = [];
              
              items.forEach(item => {
                const fieldValues = {};
                item.fieldValues.nodes.forEach(fv => {
                  if (fv.field?.name) {
                    fieldValues[fv.field.name] = fv.text || fv.name || fv.date || fv.number;
                  }
                });
                
                // Stage grouping
                const stage = fieldValues['Stage'] || 'Unassigned';
                if (!stageGroups[stage]) {
                  stageGroups[stage] = [];
                }
                stageGroups[stage].push({
                  repo: fieldValues['Study Repo'] || fieldValues['Repo'] || 'Unknown',
                  lead: fieldValues['Lead'] || 'Unassigned',
                  leadSite: fieldValues['Lead Site'] || 'Unknown',
                  targetDate: fieldValues['Target Date']
                });
                
                // Check if overdue
                if (fieldValues['Target Date']) {
                  const targetDate = new Date(fieldValues['Target Date']);
                  if (targetDate < today) {
                    overdueStudies.push({
                      repo: fieldValues['Study Repo'] || fieldValues['Repo'] || 'Unknown',
                      lead: fieldValues['Lead'] || 'Unassigned',
                      targetDate: fieldValues['Target Date'],
                      stage: stage,
                      daysOverdue: Math.floor((today - targetDate) / (1000 * 60 * 60 * 24))
                    });
                  }
                }
                
                // Partner statistics
                const partnerCount = fieldValues['Partner Count'] || 0;
                if (partnerCount > 0) {
                  partnerStats.push({
                    repo: fieldValues['Study Repo'] || fieldValues['Repo'] || 'Unknown',
                    count: partnerCount,
                    sites: fieldValues['Partner Sites'] || ''
                  });
                }
              });
              
              // Generate summary
              let summary = `# 📊 Factory Health Report\n\n`;
              summary += `**Date:** ${today.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}\n`;
              summary += `**Total Studies:** ${items.length}\n\n`;
              
              // Stage distribution
              summary += `## 📈 Studies by Stage\n\n`;
              const stageOrder = [
                'Initiation',
                'Protocol development',
                'Data diagnostics',
                'Phenotype development',
                'Phenotype evaluation',
                'Analysis specifications',
                'Network execution',
                'Study diagnostics',
                'Evidence synthesis',
                'Results evaluation'
              ];
              
              stageOrder.forEach(stage => {
                if (stageGroups[stage]) {
                  summary += `### ${stage} (${stageGroups[stage].length})\n`;
                  stageGroups[stage].forEach(study => {
                    summary += `- ${study.repo} - Lead: ${study.lead}`;
                    if (study.targetDate) {
                      summary += ` - Target: ${study.targetDate}`;
                    }
                    summary += `\n`;
                  });
                  summary += `\n`;
                }
              });
              
              // Handle any stages not in the standard order
              Object.keys(stageGroups).forEach(stage => {
                if (!stageOrder.includes(stage)) {
                  summary += `### ${stage} (${stageGroups[stage].length})\n`;
                  stageGroups[stage].forEach(study => {
                    summary += `- ${study.repo} - Lead: ${study.lead}\n`;
                  });
                  summary += `\n`;
                }
              });
              
              // Overdue studies
              if (overdueStudies.length > 0) {
                summary += `## ⚠️ Overdue Studies (${overdueStudies.length})\n\n`;
                overdueStudies.sort((a, b) => b.daysOverdue - a.daysOverdue);
                overdueStudies.forEach(study => {
                  summary += `- **${study.repo}** - ${study.daysOverdue} days overdue\n`;
                  summary += `  - Stage: ${study.stage}\n`;
                  summary += `  - Lead: ${study.lead}\n`;
                  summary += `  - Target was: ${study.targetDate}\n`;
                });
                summary += `\n`;
              } else {
                summary += `## ✅ No Overdue Studies\n\n`;
              }
              
              // Partner engagement
              if (partnerStats.length > 0) {
                summary += `## 🤝 Partner Engagement\n\n`;
                partnerStats.sort((a, b) => b.count - a.count);
                const totalPartners = partnerStats.reduce((sum, s) => sum + s.count, 0);
                const avgPartners = (totalPartners / partnerStats.length).toFixed(1);
                
                summary += `**Total Partners:** ${totalPartners}\n`;
                summary += `**Average per Study:** ${avgPartners}\n\n`;
                
                summary += `### Top Studies by Partner Count\n`;
                partnerStats.slice(0, 5).forEach(study => {
                  summary += `- ${study.repo}: **${study.count}** partners\n`;
                  if (study.sites) {
                    summary += `  - Sites: ${study.sites}\n`;
                  }
                });
                summary += `\n`;
              }
              
              // Key metrics
              summary += `## 📊 Key Metrics\n\n`;
              const activeStudies = items.filter(item => {
                const stage = item.fieldValues.nodes.find(fv => fv.field?.name === 'Stage')?.name;
                return stage && !['Results evaluation', 'Complete'].includes(stage);
              }).length;
              
              summary += `- **Active Studies:** ${activeStudies}\n`;
              summary += `- **Overdue Studies:** ${overdueStudies.length}\n`;
              summary += `- **Studies with Partners:** ${partnerStats.length}\n`;
              
              // Stage velocity (if we had historical data, we could calculate this)
              summary += `\n## 📝 Notes\n\n`;
              summary += `- This report is generated automatically every Monday at 9:05 AM ET\n`;
              summary += `- To run manually, use the workflow dispatch option\n`;
              summary += `- For detailed study information, visit the [Factory Project](https://github.com/${owner}?tab=projects&type=beta)\n`;
              
              core.setOutput('summary', summary);
              core.setOutput('total_studies', items.length);
              core.setOutput('overdue_count', overdueStudies.length);
              core.setOutput('active_studies', activeStudies);
              
            } catch (error) {
              console.error('Error querying Factory:', error);
              core.setFailed(`Failed to query Factory: ${error.message}`);
            }
      
      - name: Post health report to issue
        if: ${{ github.event.inputs.post_to_issue != 'false' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const summary = '${{ steps.factory_data.outputs.summary }}';
            const [owner, repo] = process.env.FACTORY_REPO.split('/');
            const today = new Date();
            const title = `Factory Health Report - ${today.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}`;
            
            if (!summary || summary === 'undefined') {
              console.log('No summary generated, skipping issue creation');
              return;
            }
            
            try {
              // Check if today's report already exists
              const { data: issues } = await github.rest.issues.listForRepo({
                owner,
                repo,
                labels: 'factory-health',
                state: 'open',
                per_page: 10
              });
              
              const existingIssue = issues.find(issue => issue.title === title);
              
              if (existingIssue) {
                // Update existing issue
                await github.rest.issues.update({
                  owner,
                  repo,
                  issue_number: existingIssue.number,
                  body: summary
                });
                console.log(`Updated existing health report issue #${existingIssue.number}`);
              } else {
                // Create new issue
                const { data: newIssue } = await github.rest.issues.create({
                  owner,
                  repo,
                  title,
                  body: summary,
                  labels: ['factory-health']
                });
                console.log(`Created new health report issue #${newIssue.number}`);
                
                // Close old health reports (keep only last 3)
                const oldReports = issues.filter(issue => 
                  issue.title.startsWith('Factory Health Report') && issue.title !== title
                );
                
                if (oldReports.length > 2) {
                  const toClose = oldReports.slice(2);
                  for (const issue of toClose) {
                    await github.rest.issues.update({
                      owner,
                      repo,
                      issue_number: issue.number,
                      state: 'closed',
                      state_reason: 'completed'
                    });
                    console.log(`Closed old health report issue #${issue.number}`);
                  }
                }
              }
              
            } catch (error) {
              console.error('Error posting health report:', error);
              core.warning(`Failed to post health report: ${error.message}`);
            }
      
      - name: Display summary
        run: |
          echo "## Factory Health Summary"
          echo "Total Studies: ${{ steps.factory_data.outputs.total_studies }}"
          echo "Active Studies: ${{ steps.factory_data.outputs.active_studies }}"
          echo "Overdue Studies: ${{ steps.factory_data.outputs.overdue_count }}"
          echo ""
          echo "Full report has been posted to the Factory repository issues."