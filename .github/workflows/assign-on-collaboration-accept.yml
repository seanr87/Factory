name: Auto-assign Issues on Collaboration Accept

on:
  member:
    types: [added]
  # Add manual trigger for testing
  workflow_dispatch:
    inputs:
      collaborator_username:
        description: 'Username of collaborator to assign issues to'
        required: true
        type: string
  # Add push trigger for debugging
  push:
    branches: [main]
    paths: 
      - '.github/workflows/assign-on-collaboration-accept.yml'

permissions:
  issues: write
  repository-projects: read

jobs:
  assign-pending-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug event information
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event action: ${{ github.event.action }}"
          echo "Repository type: ${{ github.repository_owner_id }}"
          echo "Event payload:"
          echo '${{ toJson(github.event) }}' | jq '.'

      - name: Find and assign pending issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Determine the collaborator username based on trigger type
            let newCollaborator;
            
            if (context.eventName === 'member' && context.payload.member) {
              newCollaborator = context.payload.member.login;
              console.log(`üéâ Member event: New collaborator @${newCollaborator}`);
            } else if (context.eventName === 'workflow_dispatch') {
              newCollaborator = '${{ inputs.collaborator_username }}';
              console.log(`üîß Manual trigger: Testing assignment for @${newCollaborator}`);
            } else if (context.eventName === 'push') {
              console.log(`üöÄ Push trigger: Workflow updated, skipping assignment`);
              return;
            } else {
              console.log(`‚ö†Ô∏è Unexpected trigger: ${context.eventName}`);
              console.log('Event payload:', JSON.stringify(context.payload, null, 2));
              return;
            }
            console.log(`üéâ New collaborator accepted: @${newCollaborator}`);
            
            try {
              // Get all study-tracking issues
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: 'study-tracking',
                state: 'open'
              });
              
              console.log(`üîç Found ${issues.data.length} study-tracking issues`);
              
              // Find issues where this user should be assigned
              const issuesToAssign = [];
              
              for (const issue of issues.data) {
                // Skip if already assigned
                if (issue.assignees && issue.assignees.length > 0) {
                  console.log(`‚è© Issue #${issue.number} already assigned to: ${issue.assignees.map(a => a.login).join(', ')}`);
                  continue;
                }
                
                // Check if the issue body mentions this user as the lead
                const issueBody = issue.body || '';
                const leadPattern = /\*\*Lead:\*\*\s+([^(]+)\s+\(@([^)]+)\)/;
                const match = issueBody.match(leadPattern);
                
                if (match) {
                  const leadName = match[1].trim();
                  const leadUsername = match[2].trim();
                  
                  console.log(`üìã Issue #${issue.number} lead: ${leadName} (@${leadUsername})`);
                  
                  if (leadUsername === newCollaborator) {
                    console.log(`‚úÖ Match found! Issue #${issue.number} should be assigned to @${newCollaborator}`);
                    issuesToAssign.push({
                      number: issue.number,
                      title: issue.title,
                      leadName: leadName
                    });
                  }
                } else {
                  console.log(`‚ö†Ô∏è  Could not parse lead info from issue #${issue.number}`);
                }
              }
              
              // Assign the issues
              if (issuesToAssign.length === 0) {
                console.log(`üìù No issues found that should be assigned to @${newCollaborator}`);
                return;
              }
              
              console.log(`üéØ Assigning ${issuesToAssign.length} issues to @${newCollaborator}:`);
              
              const results = [];
              for (const issue of issuesToAssign) {
                try {
                  await github.rest.issues.addAssignees({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    assignees: [newCollaborator]
                  });
                  
                  console.log(`‚úÖ Assigned issue #${issue.number}: ${issue.title}`);
                  results.push(`‚úÖ #${issue.number}: ${issue.title}`);
                  
                } catch (assignError) {
                  console.log(`‚ùå Failed to assign issue #${issue.number}: ${assignError.message}`);
                  results.push(`‚ùå #${issue.number}: Failed to assign`);
                }
              }
              
              // Create a summary comment on one of the assigned issues
              if (results.length > 0 && issuesToAssign.length > 0) {
                const summaryComment = [
                  `üéâ Welcome @${newCollaborator}! You've been automatically assigned to your study tracking issues:`,
                  '',
                  ...results,
                  '',
                  `This assignment happened because you accepted collaboration on this repository and were listed as the study lead.`
                ].join('\\n');
                
                try {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issuesToAssign[0].number,
                    body: summaryComment
                  });
                  console.log(`üìù Added welcome comment to issue #${issuesToAssign[0].number}`);
                } catch (commentError) {
                  console.log(`‚ö†Ô∏è  Could not add welcome comment: ${commentError.message}`);
                }
              }
              
            } catch (error) {
              console.error(`‚ùå Error in assignment workflow: ${error.message}`);
              core.setFailed(`Failed to process collaboration acceptance: ${error.message}`);
            }