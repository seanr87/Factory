name: Provision New Study

on:
  workflow_dispatch:
    inputs:
      study_title:
        description: 'Study title (will become repo name)'
        required: true
        type: string
      lead:
        description: 'Study lead name'
        required: true
        type: string
      lead_site:
        description: 'Lead site/institution'
        required: true
        type: string
      partner_sites:
        description: 'Partner sites (comma-separated list of ALL potential partners)'
        required: true
        type: string
      target_date:
        description: 'Target completion date (YYYY-MM-DD)'
        required: true
        type: string
      admins:
        description: 'Repository admins (comma-separated GitHub usernames)'
        required: true
        type: string
        default: 'seanr87'
      maintainers:
        description: 'Repository maintainers (comma-separated GitHub usernames, optional)'
        required: false
        type: string
      partner_contacts_csv:
        description: 'Partner contacts (optional, one per line: "Site Name,@github,email,notes")'
        required: false
        type: string

permissions:
  contents: read
  issues: write

jobs:
  provision:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN }}
      ORG_LOGIN: ${{ secrets.ORG_LOGIN }}
      FACTORY_PROJECT_NUMBER: ${{ secrets.FACTORY_PROJECT_NUMBER }}
      TEMPLATE_REPO: ${{ secrets.TEMPLATE_REPO }}
    
    steps:
      - name: Validate inputs and environment
        run: |
          echo "🔍 Validating provision inputs..."
          
          # Check required secrets
          if [[ -z "${{ env.GH_TOKEN }}" ]]; then
            echo "❌ ORG_ADMIN_TOKEN secret is not set"
            exit 1
          fi
          
          if [[ -z "${{ env.ORG_LOGIN }}" ]]; then
            echo "❌ ORG_LOGIN secret is not set"
            exit 1
          fi
          
          if [[ -z "${{ env.FACTORY_PROJECT_NUMBER }}" ]]; then
            echo "❌ FACTORY_PROJECT_NUMBER secret is not set"
            exit 1
          fi
          
          if [[ -z "${{ env.TEMPLATE_REPO }}" ]]; then
            echo "❌ TEMPLATE_REPO secret is not set"
            exit 1
          fi
          
          # Validate date format
          if ! date -d "${{ inputs.target_date }}" >/dev/null 2>&1; then
            echo "❌ Invalid target date format. Use YYYY-MM-DD"
            exit 1
          fi
          
          echo "✅ All validations passed"
          echo "Study: ${{ inputs.study_title }}"
          echo "Lead: ${{ inputs.lead }} @ ${{ inputs.lead_site }}"
          echo "Target: ${{ inputs.target_date }}"

      - name: Generate repository slug
        id: slug
        run: |
          # Convert title to kebab-case for repo name
          title="${{ inputs.study_title }}"
          slug=$(echo "$title" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          repo_name="study-$slug"
          
          echo "Generated repo name: $repo_name"
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT

      - name: Create study repository from template
        id: create_repo
        run: |
          echo "🏗️ Creating repository ${{ steps.slug.outputs.repo_name }}..."
          
          # First try to create from template
          if gh repo create "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}" \
            --template "${{ env.TEMPLATE_REPO }}" \
            --private \
            --description "OHDSI Network Study: ${{ inputs.study_title }}" 2>/dev/null; then
            echo "✅ Created repository from template"
          else
            echo "⚠️ Template creation failed, creating empty repo and copying files..."
            
            # Create empty private repository
            gh repo create "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}" \
              --private \
              --description "OHDSI Network Study: ${{ inputs.study_title }}"
            
            # Clone both repos to copy template files
            git clone "https://github.com/${{ env.TEMPLATE_REPO }}.git" template-source
            git clone "https://github.com/${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}.git" new-repo
            
            # Copy template files (exclude .git directory)
            cp -r template-source/* new-repo/ 2>/dev/null || true
            cp -r template-source/.github new-repo/ 2>/dev/null || true
            
            # Commit and push template files
            cd new-repo
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add .
            git commit -m "Initial commit from study template" || echo "No files to commit"
            git push
            cd ..
            
            # Cleanup
            rm -rf template-source new-repo
            
            echo "✅ Created repository and copied template files"
          fi
          
          repo_url="https://github.com/${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}"
          echo "repo_url=$repo_url" >> $GITHUB_OUTPUT
          echo "✅ Repository ready: $repo_url"

      - name: Create per-study project
        id: create_project
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const orgLogin = process.env.ORG_LOGIN;
            const repoName = "${{ steps.slug.outputs.repo_name }}";
            const studyTitle = "${{ inputs.study_title }}";
            
            console.log(`Creating per-study project for ${repoName}`);
            
            try {
              // Create the project
              const createResult = await github.graphql(`
                mutation($ownerId: ID!, $title: String!) {
                  createProjectV2(input: {
                    ownerId: $ownerId,
                    title: $title
                  }) {
                    projectV2 {
                      id
                      number
                      url
                    }
                  }
                }
              `, {
                ownerId: await github.rest.users.getByUsername({username: orgLogin}).then(r => r.data.node_id),
                title: `Study: ${studyTitle}`
              });
              
              const project = createResult.createProjectV2.projectV2;
              console.log(`Created project: ${project.url}`);
              
              // Link project to repository
              const repoResult = await github.rest.repos.get({
                owner: orgLogin,
                repo: repoName
              });
              
              await github.graphql(`
                mutation($projectId: ID!, $repoId: ID!) {
                  linkProjectV2ToRepository(input: {
                    projectId: $projectId,
                    repositoryId: $repoId
                  }) {
                    repository { id }
                  }
                }
              `, {
                projectId: project.id,
                repoId: repoResult.data.node_id
              });
              
              console.log('✅ Linked project to repository');
              
              core.setOutput('project_id', project.id);
              core.setOutput('project_number', project.number);
              core.setOutput('project_url', project.url);
              
              return {
                id: project.id,
                number: project.number,
                url: project.url
              };
              
            } catch (error) {
              console.error('Error creating project:', error);
              core.setFailed(`Failed to create project: ${error.message}`);
            }

      - name: Add project fields
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const projectId = "${{ steps.create_project.outputs.project_id }}";
            
            console.log('Adding fields to per-study project...');
            
            try {
              // Create Stage field with options in a single operation
              const stageOptions = [
                "Protocol development",
                "Data diagnostics", 
                "Phenotype development",
                "Phenotype evaluation",
                "Analysis specifications",
                "Network execution",
                "Study diagnostics",
                "Evidence synthesis",
                "Results evaluation"
              ];
              
              const stageField = await github.graphql(`
                mutation($projectId: ID!, $name: String!, $options: [ProjectV2SingleSelectFieldOptionInput!]!) {
                  createProjectV2Field(input: {
                    projectId: $projectId,
                    name: $name,
                    dataType: SINGLE_SELECT,
                    singleSelectOptions: $options
                  }) {
                    projectV2Field {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              `, {
                projectId: projectId,
                name: "Stage",
                options: stageOptions.map(name => ({ 
                  name,
                  color: "GRAY",
                  description: ""
                  }))
              });
              
              console.log('✅ Created Stage field with options');
              
              // Create Site Status field with options in a single operation
              const statusOptions = [
                "Potential",
                "Invited", 
                "Diagnostics Sent",
                "Diagnostics Returned",
                "Package Executed",
                "Results Uploaded",
                "Blocked"
              ];
              
              const statusField = await github.graphql(`
                mutation($projectId: ID!, $name: String!, $options: [ProjectV2SingleSelectFieldOptionInput!]!) {
                  createProjectV2Field(input: {
                    projectId: $projectId,
                    name: $name,
                    dataType: SINGLE_SELECT,
                    singleSelectOptions: $options
                  }) {
                    projectV2Field {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              `, {
                projectId: projectId,
                name: "Site Status",
                options: statusOptions.map(name => ({ 
                  name,
                  color: "GRAY",
                  description: ""
                  }))
              });
              
              console.log('✅ Created Site Status field with options');
              console.log('✅ All project fields created successfully');
              
            } catch (error) {
              console.error('Error creating fields:', error);
              core.setFailed(`Failed to create project fields: ${error.message}`);
            }

      - name: Create repository labels
        run: |
          echo "🏷️ Creating repository labels..."
          
          # Create stage labels
          stages=(
            "protocol-development"
            "data-diagnostics"
            "phenotype-development" 
            "phenotype-evaluation"
            "analysis-specifications"
            "network-execution"
            "study-diagnostics"
            "evidence-synthesis"
            "results-evaluation"
          )
          
          for stage in "${stages[@]}"; do
            echo "Creating label: stage:$stage"
            gh label create "stage:$stage" \
              --repo "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}" \
              --description "Stage: $stage" \
              --color "0969da" || echo "Label may already exist"
          done
          
          # Create data-partner label
          gh label create "data-partner" \
            --repo "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}" \
            --description "Data partner coordination issue" \
            --color "d73a4a" || echo "Label may already exist"
          
          echo "✅ Created repository labels"
    
      - name: Create stage checklist issues
        run: |
          echo "📋 Creating stage checklist issues..."
          
          # Stage checklist issues (these would be created from the issue templates)
          stages=(
            "protocol-development:Protocol development"
            "data-diagnostics:Data diagnostics"
            "phenotype-development:Phenotype development" 
            "phenotype-evaluation:Phenotype evaluation"
            "analysis-specifications:Analysis specifications"
            "network-execution:Network execution"
            "study-diagnostics:Study diagnostics"
            "evidence-synthesis:Evidence synthesis"
            "results-evaluation:Results evaluation"
          )
          
          for stage_info in "${stages[@]}"; do
            IFS=':' read -r stage_key stage_name <<< "$stage_info"
            
            echo "Creating stage issue: $stage_name"
            
            gh issue create \
              --repo "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}" \
              --title "Stage: $stage_name" \
              --label "stage:$stage_key" \
              --body "Stage checklist for $stage_name. Complete all acceptance criteria and close this issue to advance to the next stage."
          done
          
          echo "✅ Created 9 stage checklist issues"

      - name: Create partner site issues
        id: create_partners
        run: |
          set +e  # Disable exit on error for this step
          echo "👥 Creating partner site issues..."
          
          # Parse partner sites from input
          partner_sites="${{ inputs.partner_sites }}"
          partner_count=0
          
          # Debug: show what we're parsing
          echo "Input partner sites: '$partner_sites'"
          
          # Convert comma-separated to array using a more reliable method
          OLDIFS="$IFS"
          IFS=','
          read -ra SITES <<< "$partner_sites"
          IFS="$OLDIFS"
          
          echo "Found ${#SITES[@]} sites to process"
          
          for i in "${!SITES[@]}"; do
            site="${SITES[$i]}"
            # Trim whitespace
            site=$(echo "$site" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            
            if [[ -n "$site" ]]; then
              echo "Creating partner issue for: '$site'"
              
              gh issue create \
                --repo "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}" \
                --title "Data Partner: $site" \
                --label "data-partner" \
                --body "Data partner coordination for $site. Use this issue to track progress, assign contacts, and manage site-specific activities." || true
              
              echo "✅ Processed site: $site"
              ((partner_count++))
            else
              echo "⚠️ Skipping empty site at index $i"
            fi
          done
          
          set -e  # Re-enable exit on error
          
          echo "partner_count=$partner_count" >> $GITHUB_OUTPUT
          echo "✅ Created $partner_count partner site issues"
          
      - name: Add issues to per-study project
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const projectId = "${{ steps.create_project.outputs.project_id }}";
            const orgLogin = process.env.ORG_LOGIN;
            const repoName = "${{ steps.slug.outputs.repo_name }}";
            
            console.log('Adding issues to per-study project...');
            
            // Wait a moment for all issues to be fully created
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            try {
              // Get all issues from the repository
              const issues = await github.rest.issues.listForRepo({
                owner: orgLogin,
                repo: repoName,
                state: 'open',
                per_page: 100
              });
              
              console.log(`Found ${issues.data.length} issues to add to project`);
              
              // Debug: list all issues found
              for (const issue of issues.data) {
                console.log(`Found issue #${issue.number}: ${issue.title}`);
              }
              
              // Add each issue to the project
              for (const issue of issues.data) {
                console.log(`Adding issue #${issue.number}: ${issue.title}`);
                
                try {
                  await github.graphql(`
                    mutation($projectId: ID!, $contentId: ID!) {
                      addProjectV2ItemById(input: {
                        projectId: $projectId,
                        contentId: $contentId
                      }) {
                        item { id }
                      }
                    }
                  `, {
                    projectId: projectId,
                    contentId: issue.node_id
                  });
                  console.log(`✅ Successfully added issue #${issue.number}`);
                } catch (error) {
                  console.log(`❌ Failed to add issue #${issue.number}: ${error.message}`);
                }
              }
              
              console.log('✅ Finished adding issues to per-study project');
              
            } catch (error) {
              console.error('Error adding issues to project:', error);
              core.setFailed(`Failed to add issues to project: ${error.message}`);
            }
          
      - name: Set repository variables
        run: |
          echo "⚙️ Setting repository variables..."
          
          # Set default nudge configuration
          gh variable set NUDGE_DAY --body "Mon" --repo "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}"
          gh variable set NUDGE_HOUR_LOCAL --body "9" --repo "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}"
          gh variable set NUDGE_TZ --body "America/New_York" --repo "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}"
          gh variable set STALE_DAYS --body "7" --repo "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}"
          gh variable set FACTORY_PROJECT_NUMBER --body "${{ env.FACTORY_PROJECT_NUMBER }}" --repo "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}"
          
          # Set study lead if provided in admins
          if [[ -n "${{ inputs.admins }}" ]]; then
            first_admin=$(echo "${{ inputs.admins }}" | cut -d',' -f1 | xargs)
            gh variable set STUDY_LEAD_GH --body "@$first_admin" --repo "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}"
          fi
          
          echo "✅ Set repository variables"

      - name: Grant repository permissions
        run: |
          echo "🔐 Setting repository permissions..."
          
          # Grant admin access
          if [[ -n "${{ inputs.admins }}" ]]; then
            IFS=',' read -ra ADMINS <<< "${{ inputs.admins }}"
            for admin in "${ADMINS[@]}"; do
              admin=$(echo "$admin" | xargs)
              if [[ -n "$admin" && "$admin" != "${{ env.ORG_LOGIN }}" ]]; then
                echo "Granting admin access to: $admin"
                gh api repos/"${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}"/collaborators/"$admin" \
                  --method PUT \
                  --field permission=admin || echo "Failed to grant admin access to $admin"
              else
                echo "Skipping owner $admin (already has admin access)"
              fi
            done
          fi
          
          # Grant maintainer access
          if [[ -n "${{ inputs.maintainers }}" ]]; then
            IFS=',' read -ra MAINTAINERS <<< "${{ inputs.maintainers }}"
            for maintainer in "${MAINTAINERS[@]}"; do
              maintainer=$(echo "$maintainer" | xargs)
              if [[ -n "$maintainer" && "$maintainer" != "${{ env.ORG_LOGIN }}" ]]; then
                echo "Granting maintain access to: $maintainer"
                gh api repos/"${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}"/collaborators/"$maintainer" \
                  --method PUT \
                  --field permission=maintain || echo "Failed to grant maintain access to $maintainer"
              else
                echo "Skipping owner $maintainer (already has admin access)"
              fi
            done
          fi
          
          echo "✅ Set repository permissions"

      - name: Create/Update Factory item
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const factoryNumber = parseInt(process.env.FACTORY_PROJECT_NUMBER, 10);
            const orgLogin = process.env.ORG_LOGIN;
            const repoName = "${{ steps.slug.outputs.repo_name }}";
            const repoUrl = "${{ steps.create_repo.outputs.repo_url }}";
            const studyTitle = "${{ inputs.study_title }}";
            const lead = "${{ inputs.lead }}";
            const leadSite = "${{ inputs.lead_site }}";
            const partnerSites = "${{ inputs.partner_sites }}";
            const partnerCount = parseInt("${{ steps.create_partners.outputs.partner_count }}", 10);
            const targetDate = "${{ inputs.target_date }}";
            
            console.log(`Creating Factory item for ${studyTitle}`);
            
            try {
              // Query Factory project to get field IDs
              const factoryQuery = `
                query($login: String!, $num: Int!) {
                  user(login: $login) {
                    projectV2(number: $num) {
                      id
                      fields(first: 50) {
                        nodes {
                          ... on ProjectV2Field {
                            id
                            name
                          }
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const factoryResult = await github.graphql(factoryQuery, {
                login: orgLogin,
                num: factoryNumber
              });
              
              const factory = factoryResult.user.projectV2;
              if (!factory) {
                core.setFailed(`Factory project ${factoryNumber} not found for user ${orgLogin}`);
                return;
              }
              
              const fields = Object.fromEntries(factory.fields.nodes.map(f => [f.name, f]));
              
              // Create Factory item
              const createItemResult = await github.graphql(`
                mutation($projectId: ID!, $title: String!) {
                  addProjectV2DraftIssue(input: {
                    projectId: $projectId,
                    title: $title
                  }) {
                    projectItem { id }
                  }
                }
              `, {
                projectId: factory.id,
                title: studyTitle
              });
              
              const itemId = createItemResult.addProjectV2DraftIssue.projectItem.id;
              
              // Set text fields
              const textFields = {
                "Lead": lead,
                "Lead Site": leadSite,
                "Partner Sites": partnerSites,
                "Study Repo": repoUrl
              };
              
              for (const [fieldName, value] of Object.entries(textFields)) {
                const field = fields[fieldName];
                if (field && value) {
                  await github.graphql(`
                    mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $val: String!) {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: $projectId,
                        itemId: $itemId,
                        fieldId: $fieldId,
                        value: { text: $val }
                      }) {
                        projectV2Item { id }
                      }
                    }
                  `, {
                    projectId: factory.id,
                    itemId: itemId,
                    fieldId: field.id,
                    val: value
                  });
                }
              }
              
              // Set Target Date (date field)
              const targetDateField = fields["Target Date"];
              if (targetDateField && targetDate) {
                await github.graphql(`
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $val: Date!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: { date: $val }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `, {
                  projectId: factory.id,
                  itemId: itemId,
                  fieldId: targetDateField.id,
                  val: targetDate
                });
              }
              
              // Set Partner Count (number field)
              const partnerCountField = fields["Partner Count"];
              if (partnerCountField) {
                await github.graphql(`
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $val: Float!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: { number: $val }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `, {
                  projectId: factory.id,
                  itemId: itemId,
                  fieldId: partnerCountField.id,
                  val: partnerCount
                });
              }
              
              // Set Stage to "Protocol development"
              const stageField = fields["Stage"];
              if (stageField && stageField.options) {
                const protocolOption = stageField.options.find(o => o.name === "Protocol development");
                if (protocolOption) {
                  await github.graphql(`
                    mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optId: String!) {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: $projectId,
                        itemId: $itemId,
                        fieldId: $fieldId,
                        value: { singleSelectOptionId: $optId }
                      }) {
                        projectV2Item { id }
                      }
                    }
                  `, {
                    projectId: factory.id,
                    itemId: itemId,
                    fieldId: stageField.id,
                    optId: protocolOption.id
                  });
                }
              }
              
              console.log('✅ Created and populated Factory item');
              
            } catch (error) {
              console.error('Error creating Factory item:', error);
              core.setFailed(`Failed to create Factory item: ${error.message}`);
            }

      - name: Provision summary
        run: |
          echo "## 🎉 Study Provision Complete!"
          echo ""
          echo "**Study**: ${{ inputs.study_title }}"
          echo "**Repository**: ${{ steps.create_repo.outputs.repo_url }}"
          echo "**Project**: ${{ steps.create_project.outputs.project_url }}"
          echo "**Lead**: ${{ inputs.lead }} @ ${{ inputs.lead_site }}"
          echo "**Target Date**: ${{ inputs.target_date }}"
          echo "**Partner Count**: ${{ steps.create_partners.outputs.partner_count }}"
          echo ""
          echo "### Next Steps:"
          echo "1. Visit the study repository to review the README and stage checklists"
          echo "2. Update the protocol URL in the README"
          echo "3. Complete the Protocol development stage checklist"
          echo "4. Add any additional partners using the 'Add Data Partner' issue form"
          echo "5. Configure weekly nudge timing if needed (repository variables)"
          echo ""
          echo "### Created:"
          echo "- ✅ Study repository with template structure"
          echo "- ✅ Per-study project with Stage and Site Status fields"
          echo "- ✅ 9 stage checklist issues"
          echo "- ✅ ${{ steps.create_partners.outputs.partner_count }} partner site issues"
          echo "- ✅ Factory portfolio item"
          echo "- ✅ Repository permissions and variables"
          echo ""
          echo "The study is now ready for Protocol development!"
