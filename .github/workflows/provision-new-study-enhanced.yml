name: Provision New Study

on:
  workflow_dispatch:
    inputs:
      study_title:
        description: 'Study title (will become repo name)'
        required: true
        type: string
      lead:
        description: 'Study lead name'
        required: true
        type: string
      lead_username:
        description: 'Study lead GitHub username (without @)'
        required: true
        type: string
      lead_site:
        description: 'Lead site/institution'
        required: true
        type: string
      partner_sites:
        description: 'Partner sites (comma-separated list of ALL potential partners)'
        required: true
        type: string
      target_date:
        description: 'Target completion date (YYYY-MM-DD)'
        required: true
        type: string
      admins:
        description: 'Additional repository admins (comma-separated GitHub usernames, optional)'
        required: false
        type: string
      partner_contacts_csv:
        description: 'Partner contacts (optional, one per line: "Site Name,@github,email,notes")'
        required: false
        type: string

permissions:
  contents: read
  issues: write

jobs:
  provision:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN }}
      ORG_LOGIN: ${{ secrets.ORG_LOGIN }}
      FACTORY_PROJECT_NUMBER: ${{ vars.FACTORY_PROJECT_NUMBER }}
      FACTORY_REPO: ${{ vars.FACTORY_REPO || github.repository }}
      TEMPLATE_REPO: ${{ secrets.TEMPLATE_REPO }}
      
    steps:
      - name: Validate inputs and environment
        run: |
          echo "üîç Validating provision inputs..."
          
          # Check required secrets
          required_secrets=("GH_TOKEN" "ORG_LOGIN" "FACTORY_PROJECT_NUMBER" "FACTORY_REPO" "TEMPLATE_REPO")
          for secret in "${required_secrets[@]}"; do
            if [[ -z "${!secret}" ]]; then
              echo "‚ùå $secret secret is not set"
              exit 1
            fi
          done
          
          # Validate date format
          if ! date -d "${{ inputs.target_date }}" >/dev/null 2>&1; then
            echo "‚ùå Invalid target date format. Use YYYY-MM-DD"
            exit 1
          fi
          
          # Validate username format
          username="${{ inputs.lead_username }}"
          if [[ "$username" =~ ^@ ]]; then
            username="${username#@}"
          fi
          
          echo "‚úÖ All validations passed"
          echo "Study: ${{ inputs.study_title }}"
          echo "Lead: @$username @ ${{ inputs.lead_site }}"
          echo "Target: ${{ inputs.target_date }}"
          
          # Export cleaned username
          echo "CLEAN_USERNAME=$username" >> $GITHUB_ENV
      
      - name: Check for previous study leads
        id: previous_leads
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const factoryRepo = process.env.FACTORY_REPO;
            const [owner, repo] = factoryRepo.split('/');
            
            try {
              // Get existing Factory issues to extract previous study leads
              const issues = await github.rest.issues.listForRepo({
                owner,
                repo,
                labels: 'study',
                state: 'all',
                per_page: 100
              });
              
              const previousLeads = new Set();
              
              // Extract leads from issue bodies and titles
              issues.data.forEach(issue => {
                // Look for @mentions in issue body
                const mentions = issue.body?.match(/@[\w-]+/g) || [];
                mentions.forEach(mention => {
                  if (mention !== '@github-actions') {
                    previousLeads.add(mention.substring(1));
                  }
                });
                
                // Look for assignees
                issue.assignees?.forEach(assignee => {
                  previousLeads.add(assignee.login);
                });
              });
              
              const leadsList = Array.from(previousLeads).sort();
              console.log('Previous study leads found:', leadsList);
              
              core.setOutput('previous_leads', JSON.stringify(leadsList));
              return leadsList;
              
            } catch (error) {
              console.log('Could not fetch previous leads:', error.message);
              core.setOutput('previous_leads', '[]');
              return [];
            }
      
      - name: Generate repository slug
        id: slug
        run: |
          # Convert title to kebab-case for repo name
          title="${{ inputs.study_title }}"
          slug=$(echo "$title" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          repo_name="study-$slug"
          
          echo "Generated repo name: $repo_name"
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT

      - name: Create Factory issue first
        id: factory_issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const factoryRepo = process.env.FACTORY_REPO;
            const [owner, repo] = factoryRepo.split('/');
            const studyTitle = "${{ inputs.study_title }}";
            const leadUsername = process.env.CLEAN_USERNAME;
            const leadSite = "${{ inputs.lead_site }}";
            const targetDate = "${{ inputs.target_date }}";
            const repoName = "${{ steps.slug.outputs.repo_name }}";
            const partnerSites = "${{ inputs.partner_sites }}" || "";

            console.log(`Creating Factory issue for: ${studyTitle}`);
            
            const setupChecklist = [
              "Study repository created from template",
              "Per-study project created and linked", 
              "Stage checklist issues created (9 stages)",
              "Repository permissions configured",
              "Weekly nudge schedule configured",
              "Factory automation workflows active",
              "Study lead has admin access",
              "Initial data partner issues created"
            ];
            
            const issueBody = [
              "## üìä Data Partners Status",
              "*This section will be automatically updated as partners are added and progress through the study lifecycle.*",
              "",
              partnerSites ? `**Initial Partners**: ${partnerSites}` : "No data partners configured yet.",
              "",
              "## ‚úÖ Setup Checklist",
              "*Manual tasks for the Factory operator to complete after running this workflow.*",
              "",
              "- [ ] Configure Factory project views and groupings",
              "- [ ] Set up project insights and charts", 
              "- [ ] Verify study repository access permissions",
              "- [ ] Configure any custom automation rules",
              "- [ ] Add study to organizational tracking systems",
              "",
              "---",
              "*This issue is automatically maintained by Factory automation workflows.*"
            ].join('\n');

            try {
              let issue;
              
              // Validate leadUsername before attempting assignment
              const isValidUsername = leadUsername && 
                                    leadUsername !== 'n/a' && 
                                    leadUsername !== '' && 
                                    !leadUsername.toLowerCase().includes('tbd') &&
                                    !leadUsername.toLowerCase().includes('unknown');
              
              if (isValidUsername) {
                try {
                  // Try to create with assignee first
                  issue = await github.rest.issues.create({
                    owner,
                    repo,
                    title: `Study: ${studyTitle}`,
                    body: issueBody,
                    labels: ['study', 'provisioning'],
                    assignees: [leadUsername]
                  });
                  
                  console.log(`‚úÖ Created Factory issue #${issue.data.number} with assignee @${leadUsername}`);
                  
                } catch (assignError) {
                  if (assignError.message.includes('cannot be assigned') || assignError.status === 422) {
                    console.log(`‚ö†Ô∏è Could not assign ${leadUsername}, creating issue without assignee`);
                    
                    // Create without assignee
                    issue = await github.rest.issues.create({
                      owner,
                      repo,
                      title: `Study: ${studyTitle}`,
                      body: issueBody,
                      labels: ['study', 'provisioning']
                    });
                    
                    console.log(`‚úÖ Created Factory issue #${issue.data.number} without assignee`);
                  } else {
                    throw assignError;
                  }
                }
              } else {
                console.log(`‚ö†Ô∏è Invalid username '${leadUsername}', creating issue without assignee`);
                
                // Create without assignee
                issue = await github.rest.issues.create({
                  owner,
                  repo,
                  title: `Study: ${studyTitle}`,
                  body: issueBody,
                  labels: ['study', 'provisioning']
                });
                
                console.log(`‚úÖ Created Factory issue #${issue.data.number} without assignee`);
              }
              
              core.setOutput('issue_number', issue.data.number);
              core.setOutput('issue_url', issue.data.html_url);
              core.setOutput('node_id', issue.data.node_id);
              
              return {
                number: issue.data.number,
                url: issue.data.html_url,
                node_id: issue.data.node_id
              };
              
            } catch (error) {
              console.error('Error creating Factory issue:', error);
              core.setFailed(`Failed to create Factory issue: ${error.message}`);
            }

      - name: Create study repository from template
        id: create_repo
        run: |
          echo "üèóÔ∏è Creating repository ${{ steps.slug.outputs.repo_name }}..."
          
          # First try to create from template
          if gh repo create "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}" \
            --template "${{ env.TEMPLATE_REPO }}" \
            --private \
            --description "OHDSI Network Study: ${{ inputs.study_title }}" 2>/dev/null; then
            echo "‚úÖ Created repository from template"
          else
            echo "‚ö†Ô∏è Template creation failed, creating empty repo and copying files..."
            
            # Create empty private repository
            gh repo create "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}" \
              --private \
              --description "OHDSI Network Study: ${{ inputs.study_title }}"
            
            # Clone both repos to copy template files
            git clone "https://github.com/${{ env.TEMPLATE_REPO }}.git" template-source
            git clone "https://github.com/${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}.git" new-repo
            
            # Copy template files (exclude .git directory)
            cp -r template-source/* new-repo/ 2>/dev/null || true
            cp -r template-source/.github new-repo/ 2>/dev/null || true
            
            # Commit and push template files
            cd new-repo
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add .
            git commit -m "Initial commit from study template" || echo "No files to commit"
            git push
            cd ..
            
            # Cleanup
            rm -rf template-source new-repo
            
            echo "‚úÖ Created repository and copied template files"
          fi
          
          repo_url="https://github.com/${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}"
          echo "repo_url=$repo_url" >> $GITHUB_OUTPUT
          echo "‚úÖ Repository ready: $repo_url"

      - name: Update study repository README
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const orgLogin = process.env.ORG_LOGIN;
            const repoName = "${{ steps.slug.outputs.repo_name }}";
            const studyTitle = "${{ inputs.study_title }}";
            const studyLead = "${{ inputs.lead }}";
            const leadUsername = process.env.CLEAN_USERNAME;
            const targetDate = "${{ inputs.target_date }}";
            
            console.log('Updating README with study details...');
            
            try {
              // Get current README content
              const readme = await github.rest.repos.getContent({
                owner: orgLogin,
                repo: repoName,
                path: 'README.md'
              });
              
              let content = Buffer.from(readme.data.content, 'base64').toString();
              
              // Calculate study start date (today) in the required format
              const today = new Date();
              const months = ['January', 'February', 'March', 'April', 'May', 'June',
                             'July', 'August', 'September', 'October', 'November', 'December'];
              const startDate = `${months[today.getMonth()]} ${today.getDate()}, ${today.getFullYear()}`;
              
              // Format target date
              const targetDateObj = new Date(targetDate);
              const endDate = `${months[targetDateObj.getMonth()]} ${targetDateObj.getDate()}, ${targetDateObj.getFullYear()}`;
              
              // Replace placeholders in README
              const replacements = {
                '[Study title]': studyTitle,
                'Study lead: **-**': `Study lead: **${studyLead}**`,
                'Study lead forums tag: **[[Lead tag]](https://forums.ohdsi.org/u/[Lead tag])**': `Study lead forums tag: **[${leadUsername}](https://forums.ohdsi.org/u/${leadUsername})**`,
                'Study start date: **-**': `Study start date: **${startDate}**`,
                'Study end date: **-**': `Study end date: **${endDate}**`,
                '[Description (single paragraph)]': `${studyTitle} - OHDSI network study. Please update this description with study objectives and methodology.`
              };
              
              for (const [placeholder, replacement] of Object.entries(replacements)) {
                content = content.replace(placeholder, replacement);
              }
              
              // Update the README file
              await github.rest.repos.createOrUpdateFileContents({
                owner: orgLogin,
                repo: repoName,
                path: 'README.md',
                message: 'Update README with study details from Factory provisioning',
                content: Buffer.from(content).toString('base64'),
                sha: readme.data.sha
              });
              
              console.log('‚úÖ Updated README with study details');
              
            } catch (error) {
              console.error('Error updating README:', error);
              // Don't fail the whole workflow if README update fails
              console.log('‚ö†Ô∏è Failed to update README, continuing...');
            }
      
      - name: Update Factory issue with repository links
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const factoryRepo = process.env.FACTORY_REPO;
            const [owner, repo] = factoryRepo.split('/');
            const issueNumber = ${{ steps.factory_issue.outputs.issue_number }};
            const repoUrl = "${{ steps.create_repo.outputs.repo_url }}";
            
            // Update the Factory issue body with actual repository links
            const issue = await github.rest.issues.get({
              owner,
              repo,
              issue_number: issueNumber
            });
            
            let updatedBody = issue.data.body;
            updatedBody = updatedBody.replace(
              /\*Will be populated after provisioning\*/g,
              `[${repoUrl}](${repoUrl})`
            );
            
            await github.rest.issues.update({
              owner,
              repo,
              issue_number: issueNumber,
              body: updatedBody
            });
            
            console.log('‚úÖ Updated Factory issue with repository links');

      - name: Create per-study project
        id: create_project
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const orgLogin = process.env.ORG_LOGIN;
            const repoName = "${{ steps.slug.outputs.repo_name }}";
            const studyTitle = "${{ inputs.study_title }}";
            
            console.log(`Creating per-study project for ${repoName}`);
            
            try {
              // Create the project
              const createResult = await github.graphql(`
                mutation($ownerId: ID!, $title: String!) {
                  createProjectV2(input: {
                    ownerId: $ownerId,
                    title: $title
                  }) {
                    projectV2 {
                      id
                      number
                      url
                    }
                  }
                }
              `, {
                ownerId: await github.rest.users.getByUsername({username: orgLogin}).then(r => r.data.node_id),
                title: `Study: ${studyTitle}`
              });
              
              const project = createResult.createProjectV2.projectV2;
              console.log(`Created project: ${project.url}`);
              
              // Link project to repository
              const repoResult = await github.rest.repos.get({
                owner: orgLogin,
                repo: repoName
              });
              
              await github.graphql(`
                mutation($projectId: ID!, $repoId: ID!) {
                  linkProjectV2ToRepository(input: {
                    projectId: $projectId,
                    repositoryId: $repoId
                  }) {
                    repository { id }
                  }
                }
              `, {
                projectId: project.id,
                repoId: repoResult.data.node_id
              });
              
              console.log('‚úÖ Linked project to repository');
              
              core.setOutput('project_id', project.id);
              core.setOutput('project_number', project.number);
              core.setOutput('project_url', project.url);
              
              return {
                id: project.id,
                number: project.number,
                url: project.url
              };
              
            } catch (error) {
              console.error('Error creating project:', error);
              core.setFailed(`Failed to create project: ${error.message}`);
            }

      - name: Add project fields with rainbow colors
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const projectId = "${{ steps.create_project.outputs.project_id }}";
            
            console.log('Adding colored fields to per-study project...');
            
            try {
              // Create Stage field with rainbow colors (using valid GitHub colors)
              const stageOptions = [
                { name: "Initiation", color: "RED", description: "Study setup and initiation" },
                { name: "Protocol development", color: "ORANGE", description: "Developing study protocol" },
                { name: "Data diagnostics", color: "YELLOW", description: "Initial data quality checks" },
                { name: "Phenotype development", color: "GREEN", description: "Building phenotype definitions" },
                { name: "Phenotype evaluation", color: "BLUE", description: "Validating phenotypes" },
                { name: "Analysis specifications", color: "PURPLE", description: "Finalizing analysis plan" },
                { name: "Network execution", color: "PINK", description: "Running across network" },
                { name: "Study diagnostics", color: "GRAY", description: "Post-execution diagnostics" },
                { name: "Evidence synthesis", color: "RED", description: "Synthesizing results" },
                { name: "Results evaluation", color: "ORANGE", description: "Final evaluation and reporting" }
              ];
              
              const stageField = await github.graphql(`
                mutation($projectId: ID!, $name: String!, $options: [ProjectV2SingleSelectFieldOptionInput!]!) {
                  createProjectV2Field(input: {
                    projectId: $projectId,
                    name: $name,
                    dataType: SINGLE_SELECT,
                    singleSelectOptions: $options
                  }) {
                    projectV2Field {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                      }
                    }
                  }
                }
              `, {
                projectId: projectId,
                name: "Stage",
                options: stageOptions
              });
              
              console.log('‚úÖ Created Stage field with rainbow colors');
              
              // Create Site Status field with rainbow colors (using valid GitHub colors)
              const statusOptions = [
                { name: "Potential", color: "RED", description: "Potential data partner" },
                { name: "Invited", color: "ORANGE", description: "Invitation sent" },
                { name: "Committed", color: "YELLOW", description: "Committed to participate" },
                { name: "Diagnostics Sent", color: "GREEN", description: "Diagnostics package sent" },
                { name: "Diagnostics Returned", color: "BLUE", description: "Diagnostics completed" },
                { name: "Package Executed", color: "PURPLE", description: "Study package executed" },
                { name: "Results Uploaded", color: "PINK", description: "Results submitted" },
                { name: "Complete", color: "GRAY", description: "All tasks completed" },
                { name: "Withdrawn", color: "RED", description: "Withdrawn from study" },
                { name: "Blocked", color: "ORANGE", description: "Blocked or on hold" }
              ];
              
              const statusField = await github.graphql(`
                mutation($projectId: ID!, $name: String!, $options: [ProjectV2SingleSelectFieldOptionInput!]!) {
                  createProjectV2Field(input: {
                    projectId: $projectId,
                    name: $name,
                    dataType: SINGLE_SELECT,
                    singleSelectOptions: $options
                  }) {
                    projectV2Field {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                      }
                    }
                  }
                }
              `, {
                projectId: projectId,
                name: "Site Status",
                options: statusOptions
              });
              
              console.log('‚úÖ Created Site Status field with rainbow colors');
              console.log('‚úÖ All colored project fields created successfully');
              
            } catch (error) {
              console.error('Error creating fields:', error);
              core.setFailed(`Failed to create project fields: ${error.message}`);
            }

      - name: Create repository labels
        run: |
          echo "üè∑Ô∏è Creating repository labels..."
          
          # Create stage labels with rainbow colors
          stages=(
            "initiation"
            "protocol-development"
            "data-diagnostics"
            "phenotype-development" 
            "phenotype-evaluation"
            "analysis-specifications"
            "network-execution"
            "study-diagnostics"
            "evidence-synthesis"
            "results-evaluation"
          )
          
          colors=("d73a4a" "fd7e14" "ffc107" "28a745" "007bff" "6f42c1" "e83e8c" "fd79a8" "6c757d" "495057")
          
          for i in "${!stages[@]}"; do
            stage="${stages[$i]}"
            color="${colors[$i]}"
            echo "Creating label: stage:$stage with color #$color"
            gh label create "stage:$stage" \
              --repo "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}" \
              --description "Stage: $stage" \
              --color "$color" || echo "Label may already exist"
          done
          
          # Create data-partner label
          gh label create "data-partner" \
            --repo "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}" \
            --description "Data partner coordination issue" \
            --color "d73a4a" || echo "Label may already exist"
          
          echo "‚úÖ Created repository labels with rainbow colors"
    
      - name: Create stage checklist issues
        run: |
          echo "üìã Creating stage checklist issues..."
          
          # Stage checklist issues with Initiation added
          stages=(
            "initiation:Initiation"
            "protocol-development:Protocol development"
            "data-diagnostics:Data diagnostics"
            "phenotype-development:Phenotype development" 
            "phenotype-evaluation:Phenotype evaluation"
            "analysis-specifications:Analysis specifications"
            "network-execution:Network execution"
            "study-diagnostics:Study diagnostics"
            "evidence-synthesis:Evidence synthesis"
            "results-evaluation:Results evaluation"
          )
          
          for stage_info in "${stages[@]}"; do
            IFS=':' read -r stage_key stage_name <<< "$stage_info"
            
            echo "Creating stage issue: $stage_name"
            
            gh issue create \
              --repo "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}" \
              --title "Stage: $stage_name" \
              --label "stage:$stage_key" \
              --body "Stage checklist for $stage_name. Complete all acceptance criteria and close this issue to advance to the next stage."
          done
          
          echo "‚úÖ Created 10 stage checklist issues"

      - name: Create partner site issues
        id: create_partners
        run: |
          set +e  # Disable exit on error for this step
          echo "üë• Creating partner site issues..."
          
          # Parse partner sites from input
          partner_sites="${{ inputs.partner_sites }}"
          partner_count=0
          
          # Debug: show what we're parsing
          echo "Input partner sites: '$partner_sites'"
          
          # Convert comma-separated to array using a more reliable method
          OLDIFS="$IFS"
          IFS=','
          read -ra SITES <<< "$partner_sites"
          IFS="$OLDIFS"
          
          echo "Found ${#SITES[@]} sites to process"
          
          for i in "${!SITES[@]}"; do
            site="${SITES[$i]}"
            # Trim whitespace
            site=$(echo "$site" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            
            if [[ -n "$site" ]]; then
              echo "Creating partner issue for: '$site'"
              
              gh issue create \
                --repo "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}" \
                --title "Data Partner: $site" \
                --label "data-partner" \
                --body "Data partner coordination for $site. Use this issue to track progress, assign contacts, and manage site-specific activities." || true
              
              echo "‚úÖ Processed site: $site"
              ((partner_count++))
            else
              echo "‚ö†Ô∏è Skipping empty site at index $i"
            fi
          done
          
          set -e  # Re-enable exit on error
          
          echo "partner_count=$partner_count" >> $GITHUB_OUTPUT
          echo "‚úÖ Created $partner_count partner site issues"
          
      - name: Add issues to per-study project with proper status
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const projectId = "${{ steps.create_project.outputs.project_id }}";
            const orgLogin = process.env.ORG_LOGIN;
            const repoName = "${{ steps.slug.outputs.repo_name }}";
            
            console.log('Adding issues to per-study project with proper status...');
            
            // Wait a moment for all issues to be fully created
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            try {
              // Get project fields including Status field
              const projectQuery = `
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      fields(first: 50) {
                        nodes {
                          ... on ProjectV2Field {
                            id
                            name
                          }
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const projectResult = await github.graphql(projectQuery, {
                projectId: projectId
              });
              
              const fields = Object.fromEntries(
                projectResult.node.fields.nodes.map(f => [f.name, f])
              );
              
              const statusField = fields["Status"];
              let todoOptionId = null;
              let inProgressOptionId = null;
              
              if (statusField && statusField.options) {
                todoOptionId = statusField.options.find(o => 
                  o.name.toLowerCase().includes('todo') || 
                  o.name.toLowerCase().includes('to do')
                )?.id;
                
                inProgressOptionId = statusField.options.find(o => 
                  o.name.toLowerCase().includes('progress') ||
                  o.name.toLowerCase().includes('in progress')
                )?.id;
                
                console.log(`Found Status field options: Todo=${todoOptionId}, InProgress=${inProgressOptionId}`);
              }
              
              // Get all issues from the repository
              const issues = await github.rest.issues.listForRepo({
                owner: orgLogin,
                repo: repoName,
                state: 'open',
                per_page: 100
              });
              
              console.log(`Found ${issues.data.length} issues to add to project`);
              
              // Add each issue to the project with appropriate status
              for (const issue of issues.data) {
                console.log(`Adding issue #${issue.number}: ${issue.title}`);
                
                try {
                  // Add issue to project
                  const addResult = await github.graphql(`
                    mutation($projectId: ID!, $contentId: ID!) {
                      addProjectV2ItemById(input: {
                        projectId: $projectId,
                        contentId: $contentId
                      }) {
                        item { id }
                      }
                    }
                  `, {
                    projectId: projectId,
                    contentId: issue.node_id
                  });
                  
                  const itemId = addResult.addProjectV2ItemById.item.id;
                  console.log(`‚úÖ Added issue #${issue.number} to project`);
                  
                  // Set status based on issue type
                  if (statusField && statusField.options) {
                    let targetStatusId = null;
                    
                    // Check stage type and set appropriate status
                    const isInitiation = issue.labels.some(label => 
                      label.name === 'stage:initiation'
                    );
                    const isProtocolDevelopment = issue.labels.some(label => 
                      label.name === 'stage:protocol-development'
                    );
                    
                    if (isInitiation && inProgressOptionId) {
                      targetStatusId = inProgressOptionId;
                      console.log(`Setting Initiation stage to In Progress`);
                    } else if (isProtocolDevelopment && todoOptionId) {
                      targetStatusId = todoOptionId;
                      console.log(`Setting Protocol development stage to Todo`);
                    } else if (issue.labels.some(label => label.name.startsWith('stage:')) && todoOptionId) {
                      targetStatusId = todoOptionId;
                      console.log(`Setting other stage issue to Todo`);
                    } else if (issue.labels.some(label => label.name === 'data-partner') && todoOptionId) {
                      targetStatusId = todoOptionId;
                      console.log(`Setting partner issue to Todo`);
                    }
                    
                    // Apply the status if we determined one
                    if (targetStatusId) {
                      await github.graphql(`
                        mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optId: String!) {
                          updateProjectV2ItemFieldValue(input: {
                            projectId: $projectId,
                            itemId: $itemId,
                            fieldId: $fieldId,
                            value: { singleSelectOptionId: $optId }
                          }) {
                            projectV2Item { id }
                          }
                        }
                      `, {
                        projectId: projectId,
                        itemId: itemId,
                        fieldId: statusField.id,
                        optId: targetStatusId
                      });
                      
                      console.log(`‚úÖ Set status for issue #${issue.number}`);
                    }
                  }
                  
                } catch (error) {
                  console.log(`‚ùå Failed to add/configure issue #${issue.number}: ${error.message}`);
                }
              }
              
              console.log('‚úÖ Finished adding issues to per-study project with status');
              
            } catch (error) {
              console.error('Error adding issues to project:', error);
              core.setFailed(`Failed to add issues to project: ${error.message}`);
            }
          
      - name: Set repository variables
        run: |
          echo "‚öôÔ∏è Setting repository variables..."
          
          # Set default nudge configuration
          gh variable set NUDGE_DAY --body "Mon" --repo "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}"
          gh variable set NUDGE_HOUR_LOCAL --body "9" --repo "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}"
          gh variable set NUDGE_TZ --body "America/New_York" --repo "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}"
          gh variable set STALE_DAYS --body "7" --repo "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}"
          gh variable set FACTORY_PROJECT_NUMBER --body "${{ env.FACTORY_PROJECT_NUMBER }}" --repo "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}"
          
          # Set study lead using cleaned username
          gh variable set STUDY_LEAD_GH --body "@${{ env.CLEAN_USERNAME }}" --repo "${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}"
          
          echo "‚úÖ Set repository variables"

      - name: Grant repository permissions
        run: |
          echo "üîë Setting repository permissions..."
          
          # Grant admin access to study lead (automatically)
          echo "Granting admin access to study lead: ${{ env.CLEAN_USERNAME }}"
          gh api repos/"${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}"/collaborators/"${{ env.CLEAN_USERNAME }}" \
            --method PUT \
            --field permission=admin || echo "Failed to grant admin access to study lead"
          
          # Grant admin access to additional admins (if provided)
          if [[ -n "${{ inputs.admins }}" ]]; then
            IFS=',' read -ra ADMINS <<< "${{ inputs.admins }}"
            for admin in "${ADMINS[@]}"; do
              admin=$(echo "$admin" | xargs)
              if [[ -n "$admin" && "$admin" != "${{ env.ORG_LOGIN }}" && "$admin" != "${{ env.CLEAN_USERNAME }}" ]]; then
                echo "Granting admin access to additional admin: $admin"
                gh api repos/"${{ env.ORG_LOGIN }}/${{ steps.slug.outputs.repo_name }}"/collaborators/"$admin" \
                  --method PUT \
                  --field permission=admin || echo "Failed to grant admin access to $admin"
              else
                echo "Skipping $admin (owner or duplicate)"
              fi
            done
          else
            echo "No additional admins specified"
          fi
          
          echo "‚úÖ Set repository permissions"

      - name: Create/Update Factory item
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const factoryNumber = parseInt(process.env.FACTORY_PROJECT_NUMBER, 10);
            const orgLogin = process.env.ORG_LOGIN;
            const repoName = "${{ steps.slug.outputs.repo_name }}";
            const repoUrl = "${{ steps.create_repo.outputs.repo_url }}";
            const studyTitle = "${{ inputs.study_title }}";
            const lead = "${{ inputs.lead }}";
            const leadSite = "${{ inputs.lead_site }}";
            const partnerSites = "${{ inputs.partner_sites }}";
            const partnerCount = parseInt("${{ steps.create_partners.outputs.partner_count }}", 10);
            const targetDate = "${{ inputs.target_date }}";
            
            console.log(`Creating Factory item for ${studyTitle}`);
            
            try {
              // Query Factory project to get field IDs
              const factoryQuery = `
                query($login: String!, $num: Int!) {
                  user(login: $login) {
                    projectV2(number: $num) {
                      id
                      fields(first: 50) {
                        nodes {
                          ... on ProjectV2Field {
                            id
                            name
                          }
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const factoryResult = await github.graphql(factoryQuery, {
                login: orgLogin,
                num: factoryNumber
              });
              
              const factory = factoryResult.user.projectV2;
              if (!factory) {
                core.setFailed(`Factory project ${factoryNumber} not found for user ${orgLogin}`);
                return;
              }
              
              const fields = Object.fromEntries(factory.fields.nodes.map(f => [f.name, f]));
              
              // Validate required fields exist
              const requiredFields = ["Lead", "Lead Site", "Partner Sites", "Partner Count", "Target Date"];
              const repoField = fields["Study Repo"] || fields["Repo"];
              if (!repoField) {
                core.setFailed("Factory must have a 'Study Repo' or 'Repo' field");
                return;
              }
              
              const missingFields = requiredFields.filter(f => !fields[f]);
              if (missingFields.length > 0) {
                core.setFailed(`Factory is missing required fields: ${missingFields.join(', ')}`);
                return;
              }
              
              // Create Factory item
              const createItemResult = await github.graphql(`
                mutation($projectId: ID!, $title: String!) {
                  addProjectV2DraftIssue(input: {
                    projectId: $projectId,
                    title: $title
                  }) {
                    projectItem { id }
                  }
                }
              `, {
                projectId: factory.id,
                title: studyTitle
              });
              
              const itemId = createItemResult.addProjectV2DraftIssue.projectItem.id;
              
              // Set text fields (use the actual field name that exists)
              const textFields = {
                "Lead": lead,
                "Lead Site": leadSite,
                "Partner Sites": partnerSites,
                [repoField.name]: repoUrl
              };
              
              for (const [fieldName, value] of Object.entries(textFields)) {
                const field = fields[fieldName];
                if (field && value) {
                  await github.graphql(`
                    mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $val: String!) {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: $projectId,
                        itemId: $itemId,
                        fieldId: $fieldId,
                        value: { text: $val }
                      }) {
                        projectV2Item { id }
                      }
                    }
                  `, {
                    projectId: factory.id,
                    itemId: itemId,
                    fieldId: field.id,
                    val: value
                  });
                }
              }
              
              // Set Target Date (date field)
              const targetDateField = fields["Target Date"];
              if (targetDateField && targetDate) {
                await github.graphql(`
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $val: Date!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: { date: $val }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `, {
                  projectId: factory.id,
                  itemId: itemId,
                  fieldId: targetDateField.id,
                  val: targetDate
                });
              }
              
              // Set Partner Count (number field)
              const partnerCountField = fields["Partner Count"];
              if (partnerCountField) {
                await github.graphql(`
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $val: Float!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: { number: $val }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `, {
                  projectId: factory.id,
                  itemId: itemId,
                  fieldId: partnerCountField.id,
                  val: partnerCount
                });
              }
              
              // Set Stage to "Protocol development"
              const stageField = fields["Stage"];
              if (stageField && stageField.options) {
                const protocolOption = stageField.options.find(o => o.name === "Protocol development");
                if (protocolOption) {
                  await github.graphql(`
                    mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optId: String!) {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: $projectId,
                        itemId: $itemId,
                        fieldId: $fieldId,
                        value: { singleSelectOptionId: $optId }
                      }) {
                        projectV2Item { id }
                      }
                    }
                  `, {
                    projectId: factory.id,
                    itemId: itemId,
                    fieldId: stageField.id,
                    optId: protocolOption.id
                  });
                }
              }
              
              console.log('‚úÖ Created and populated Factory item');
              
            } catch (error) {
              console.error('Error creating Factory item:', error);
              core.setFailed(`Failed to create Factory item: ${error.message}`);
            }

      - name: Add Factory issue to Factory project with proper status
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const factoryNumber = parseInt(process.env.FACTORY_PROJECT_NUMBER, 10);
            const orgLogin = process.env.ORG_LOGIN;
            const factoryIssueNodeId = "${{ steps.factory_issue.outputs.node_id }}";
            const leadUsername = process.env.CLEAN_USERNAME;
            const leadSite = "${{ inputs.lead_site }}";
            const targetDate = "${{ inputs.target_date }}";
            const repoUrl = "${{ steps.create_repo.outputs.repo_url }}";
            const partnerCount = parseInt("${{ steps.create_partners.outputs.partner_count }}", 10) || 0;
            const partnerSites = "${{ inputs.partner_sites }}" || "";
            
            console.log('Adding Factory issue to Factory project...');
            
            try {
              // Query Factory project
              const query = `
                query($login: String!, $num: Int!) {
                  user(login: $login) {
                    projectV2(number: $num) {
                      id
                      fields(first: 50) {
                        nodes {
                          ... on ProjectV2Field {
                            id
                            name
                          }
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const result = await github.graphql(query, {
                login: orgLogin,
                num: factoryNumber
              });
              
              const project = result.user.projectV2;
              if (!project) {
                core.setFailed(`Factory project ${factoryNumber} not found`);
                return;
              }
              
              // Add issue to project
              const addResult = await github.graphql(`
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {
                    projectId: $projectId,
                    contentId: $contentId
                  }) {
                    item { id }
                  }
                }
              `, {
                projectId: project.id,
                contentId: factoryIssueNodeId
              });
              
              const itemId = addResult.addProjectV2ItemById.item.id;
              const fields = Object.fromEntries(project.fields.nodes.map(f => [f.name, f]));
              
              // Set all the field values
              const fieldUpdates = [
                { fieldName: "Status", value: "Initiation" },
                { fieldName: "Stage", value: "Initiation" },
                { fieldName: "Lead", value: `@${leadUsername}` },
                { fieldName: "Lead Site", value: leadSite },
                { fieldName: "Target Date", value: targetDate },
                { fieldName: "Study Repo", value: repoUrl },
                { fieldName: "Partner Sites", value: partnerSites },
                { fieldName: "Partner Count", value: partnerCount }
              ];
              
              for (const update of fieldUpdates) {
                const field = fields[update.fieldName];
                if (!field) continue;
                
                if (field.options) {
                  // Single select field
                  const option = field.options.find(o => o.name === update.value);
                  if (option) {
                    await github.graphql(`
                      mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optId: String!) {
                        updateProjectV2ItemFieldValue(input: {
                          projectId: $projectId,
                          itemId: $itemId,
                          fieldId: $fieldId,
                          value: { singleSelectOptionId: $optId }
                        }) {
                          projectV2Item { id }
                        }
                      }
                    `, {
                      projectId: project.id,
                      itemId: itemId,
                      fieldId: field.id,
                      optId: option.id
                    });
                  }
                } else if (update.fieldName === "Partner Count") {
                  // Number field
                  await github.graphql(`
                    mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $val: Float!) {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: $projectId,
                        itemId: $itemId,
                        fieldId: $fieldId,
                        value: { number: $val }
                      }) {
                        projectV2Item { id }
                      }
                    }
                  `, {
                    projectId: project.id,
                    itemId: itemId,
                    fieldId: field.id,
                    val: update.value
                  });
                } else if (update.fieldName === "Target Date") {
                  // Date field
                  await github.graphql(`
                    mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $val: Date!) {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: $projectId,
                        itemId: $itemId,
                        fieldId: $fieldId,
                        value: { date: $val }
                      }) {
                        projectV2Item { id }
                      }
                    }
                  `, {
                    projectId: project.id,
                    itemId: itemId,
                    fieldId: field.id,
                    val: update.value
                  });
                } else {
                  // Text field
                  await github.graphql(`
                    mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $val: String!) {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: $projectId,
                        itemId: $itemId,
                        fieldId: $fieldId,
                        value: { text: $val }
                      }) {
                        projectV2Item { id }
                      }
                    }
                  `, {
                    projectId: project.id,
                    itemId: itemId,
                    fieldId: field.id,
                    val: update.value.toString()
                  });
                }
              }
              
              console.log('‚úÖ Added Factory issue to project with all fields populated');
              
            } catch (error) {
              console.error('Error adding to Factory project:', error);
              core.setFailed(`Failed to add to Factory project: ${error.message}`);
            }        
            
      - name: Final provision summary
        run: |
          echo "## üéâ Enhanced Study Provision Complete!"
          echo ""
          echo "**Factory Issue**: ${{ steps.factory_issue.outputs.issue_url }}"
          echo "**Study Repository**: ${{ steps.create_repo.outputs.repo_url }}"
          echo "**Study Lead**: @${{ env.CLEAN_USERNAME }}"
          echo "**Status**: Initiation ‚Üí Todo (ready for Protocol development)"
          echo ""
          echo "### Next Steps:"
          echo "1. Visit the Factory issue to track overall progress"
          echo "2. Complete the Factory setup checklist items"
          echo "3. Begin Protocol development in the study repository"
          echo "4. Add data partners as needed"
          echo ""
          echo "The study is now tracked in the Factory portfolio!"