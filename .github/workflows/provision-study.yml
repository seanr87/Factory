# Modular study provisioning workflow
# Per briefing/workflows/reusable.md and briefing/security/best-practices.md

name: Provision New Study

on:
  workflow_dispatch:
    inputs:
      study_title:
        description: 'Study title'
        required: true
        type: string
      target_date:
        description: 'Target completion date (YYYY-MM-DD)'
        required: false
        type: string
      study_lead_selection:
        description: 'Select Study Lead'
        required: true
        type: choice
        options:
          - 'Add new study lead'
          - 'Sean|seanr87'
          - 'ben|benwmar'
          - 'Resford Rouzer|resford'
          - 'Hannah Lee|hlee110123'
          - 'Paul|paulnagy'
          - 'robert|rtmill'
      new_lead_name:
        description: 'New Study Lead name'
        required: false
        type: string
      new_lead_github:
        description: 'New Study Lead GitHub username'
        required: false
        type: string

# Per briefing/actions/permissions.md - minimal permissions
permissions:
  contents: write
  issues: write
  repository-projects: write

jobs:
  provision:
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Resolve study lead information
        id: resolve_lead
        uses: ./.github/actions/manage-study-leads
        with:
          operation: validate
          selected_lead: ${{ inputs.study_lead_selection }}
          lead_name: ${{ inputs.new_lead_name }}
          lead_github: ${{ inputs.new_lead_github }}

      - name: Add new study lead to database
        if: inputs.study_lead_selection == 'Add new study lead'
        uses: ./.github/actions/manage-study-leads
        with:
          operation: add
          lead_name: ${{ inputs.new_lead_name }}
          lead_github: ${{ inputs.new_lead_github }}

      - name: Commit updated study leads data
        if: inputs.study_lead_selection == 'Add new study lead'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/data/study-leads.json
          git diff --staged --quiet || git commit -m "Add new study lead: ${{ inputs.new_lead_name }}"
          git push

      - name: Update study leads dropdown
        if: inputs.study_lead_selection == 'Add new study lead'
        uses: ./.github/actions/update-workflow-dropdown
        with:
          workflow_path: .github/workflows/provision-study.yml

      - name: Commit updated dropdown
        if: inputs.study_lead_selection == 'Add new study lead'
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/workflows/provision-study.yml
          if git diff --staged --quiet; then
            echo "No dropdown changes to commit"
          else
            git commit -m "Update study leads dropdown options"
            git pull --rebase origin main
            git push
            echo "✅ Updated workflow dropdown with current study leads"
          fi

      - name: Validate inputs
        id: validate
        uses: ./.github/actions/validate-study-inputs
        with:
          study_title: ${{ inputs.study_title }}
          lead_name: ${{ steps.resolve_lead.outputs.lead_name }}
          lead_github: ${{ steps.resolve_lead.outputs.lead_github }}
          target_date: ${{ inputs.target_date }}

      - name: Create repository
        id: repo
        uses: ./.github/actions/create-study-repository
        with:
          repo_name: ${{ steps.validate.outputs.repo_name }}
          study_title: ${{ inputs.study_title }}
          lead_github: ${{ steps.resolve_lead.outputs.lead_github }}
          org_token: ${{ secrets.ORG_ADMIN_TOKEN }}

      - name: Setup project
        id: project
        uses: ./.github/actions/setup-study-project
        with:
          repo_name: ${{ steps.validate.outputs.repo_name }}
          study_title: ${{ inputs.study_title }}
          org_token: ${{ secrets.ORG_ADMIN_TOKEN }}

      - name: Invite study lead as collaborator
        id: invite
        uses: ./.github/actions/invite-collaborator
        with:
          lead_github: ${{ steps.resolve_lead.outputs.lead_github }}
          permission: read
          org_token: ${{ secrets.ORG_ADMIN_TOKEN }}

      - name: Create Factory tracking
        id: tracking
        uses: ./.github/actions/create-factory-tracking
        with:
          study_title: ${{ inputs.study_title }}
          lead_name: ${{ steps.resolve_lead.outputs.lead_name }}
          lead_github: ${{ steps.resolve_lead.outputs.lead_github }}
          start_date: ${{ steps.validate.outputs.start_date }}
          target_date: ${{ steps.validate.outputs.target_date }}
          repo_url: ${{ steps.repo.outputs.repo_url }}
          already_collaborator: ${{ steps.invite.outputs.already_collaborator }}
          invitation_sent: ${{ steps.invite.outputs.invitation_sent }}
          org_token: ${{ secrets.ORG_ADMIN_TOKEN }}

      - name: Add to Factory project
        uses: ./.github/actions/add-to-factory-project
        with:
          issue_node_id: ${{ steps.tracking.outputs.issue_node_id }}
          study_title: ${{ inputs.study_title }}
          factory_project_number: ${{ vars.FACTORY_PROJECT_NUMBER }}
          lead_name: ${{ steps.resolve_lead.outputs.lead_name }}
          repo_url: ${{ steps.repo.outputs.repo_url }}
          start_date: ${{ steps.validate.outputs.start_date }}
          target_date: ${{ steps.validate.outputs.target_date }}
          org_token: ${{ secrets.ORG_ADMIN_TOKEN }}

      - name: Extract Factory issue number
        id: extract_issue_number
        run: |
          ISSUE_URL="${{ steps.tracking.outputs.issue_url }}"
          ISSUE_NUMBER=$(echo "$ISSUE_URL" | grep -o '[0-9]*$')
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT

      - name: Create status tracking issues
        id: status_issues
        uses: ./.github/actions/create-status-issues
        with:
          repo_name: ${{ steps.validate.outputs.repo_name }}
          study_title: ${{ inputs.study_title }}
          project_id: ${{ steps.project.outputs.project_id }}
          lead_github: ${{ steps.resolve_lead.outputs.lead_github }}
          factory_issue_number: ${{ steps.extract_issue_number.outputs.issue_number }}
          org_token: ${{ secrets.ORG_ADMIN_TOKEN }}

      - name: Update Factory issue with objective links
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_ADMIN_TOKEN }}
          script: |
            const factoryIssueNumber = ${{ steps.extract_issue_number.outputs.issue_number }};
            const issuesData = JSON.parse('${{ steps.status_issues.outputs.issues_data }}');
            
            console.log('Updating Factory issue with objective links...');
            console.log('Issues data:', issuesData);
            
            // Get current Factory issue
            const factoryIssue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: factoryIssueNumber
            });
            
            let updatedBody = factoryIssue.data.body;
            console.log('Original Factory issue body:');
            console.log('---START BODY---');
            console.log(updatedBody);
            console.log('---END BODY---');
            
            // Update each objective row with links
            for (const issue of issuesData) {
              const objectiveName = issue.factory_objective;
              const issueUrl = issue.url;
              
              // Replace unlinked objective with linked version
              const oldRow = `| ${objectiveName} | — |`;
              const newRow = `| [${objectiveName}](${issueUrl}) | — |`;
              
              console.log(`Looking for: "${oldRow}"`);
              console.log(`Replacing with: "${newRow}"`);
              
              const beforeReplace = updatedBody.includes(oldRow);
              console.log(`Found old row: ${beforeReplace}`);
              
              updatedBody = updatedBody.replace(oldRow, newRow);
              
              const afterReplace = updatedBody.includes(newRow);
              console.log(`New row present: ${afterReplace}`);
            }
            
            console.log('Updated Factory issue body:');
            console.log('---START UPDATED BODY---');
            console.log(updatedBody);
            console.log('---END UPDATED BODY---');
            
            // Update the Factory issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: factoryIssueNumber,
              body: updatedBody
            });
            
            console.log('✅ Factory issue updated with objective links');

      - name: Populate study template files
        id: populate_files
        uses: ./.github/actions/populate-study-template-files
        with:
          repo_name: ${{ steps.validate.outputs.repo_name }}
          study_title: ${{ inputs.study_title }}
          lead_name: ${{ steps.resolve_lead.outputs.lead_name }}
          lead_github: ${{ steps.resolve_lead.outputs.lead_github }}
          start_date: ${{ steps.validate.outputs.start_date }}
          target_date: ${{ steps.validate.outputs.target_date }}
          org_token: ${{ secrets.ORG_ADMIN_TOKEN }}

      - name: Create study README
        id: readme
        uses: ./.github/actions/create-study-readme
        with:
          repo_name: ${{ steps.validate.outputs.repo_name }}
          study_title: ${{ inputs.study_title }}
          lead_name: ${{ steps.resolve_lead.outputs.lead_name }}
          lead_github: ${{ steps.resolve_lead.outputs.lead_github }}
          factory_issue_number: ${{ steps.extract_issue_number.outputs.issue_number }}
          project_url: ${{ steps.project.outputs.project_url }}
          issues_data: ${{ steps.status_issues.outputs.issues_data }}
          org_token: ${{ secrets.ORG_ADMIN_TOKEN }}

      - name: Configure study repository secrets
        env:
          GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN }}
        run: |
          echo "🔑 Setting up study repository secrets..."
          
          # Set the ORG_ADMIN_TOKEN secret so workflows can update Factory
          echo "Setting ORG_ADMIN_TOKEN secret for Factory updates..."
          gh secret set ORG_ADMIN_TOKEN \
            --body "${{ secrets.ORG_ADMIN_TOKEN }}" \
            --repo "${{ github.repository_owner }}/${{ steps.validate.outputs.repo_name }}"
          
          # Set Factory project URL variable for direct project access
          echo "Setting FACTORY_PROJECT_URL variable for direct project access..."
          if [[ -n "${{ vars.FACTORY_PROJECT_URL }}" ]]; then
            gh variable set FACTORY_PROJECT_URL \
              --body "${{ vars.FACTORY_PROJECT_URL }}" \
              --repo "${{ github.repository_owner }}/${{ steps.validate.outputs.repo_name }}"
          else
            echo "⚠️ FACTORY_PROJECT_URL variable not set in Factory repo, using fallback method"
          fi
          
          echo "✅ Study repository secrets and variables configured"

      - name: Summary
        run: |
          echo "## ✅ Study Provisioned Successfully"
          echo ""
          echo "**Repository:** ${{ steps.repo.outputs.repo_url }}"
          echo "**Project:** ${{ steps.project.outputs.project_url }}"
          echo "**Lead:** @${{ steps.resolve_lead.outputs.lead_github }}"
          echo "**Factory Tracking:** ${{ steps.tracking.outputs.issue_url }}"
          echo "**Status Issues:** ${{ steps.status_issues.outputs.issues_created }} created"
          echo "**Template Files:** ${{ steps.populate_files.outputs.files_populated }} files populated with study data"
          echo "**README:** Created with objectives checklist and access instructions"
          echo ""
          echo "### Status Tracking System"
          echo "- ✅ Status tracking issues created in study repository"
          echo "- ✅ Issues assigned to study project (ordered by priority)"
          echo "- ✅ Status feedback automation configured"
          echo "- ✅ Repository secrets configured for Factory integration"
          echo "- ✅ Study README created with objectives checklist and quick access links"
          echo "- 🔄 When issues are closed, Factory status will update automatically"
          echo ""
          echo "### Next Steps:"
          echo "1. Visit the repository README for objectives overview and quick access"
          echo "2. Check the linked project board for detailed status tracking"
          echo "3. Update status and close issues as milestones are reached"
          echo "4. Monitor Factory issue for portfolio-level status updates"