# Modular study provisioning workflow
# Per briefing/workflows/reusable.md and briefing/security/best-practices.md

name: Provision New Study

on:
  workflow_dispatch:
    inputs:
      study_title:
        description: 'Study title'
        required: true
        type: string
      target_date:
        description: 'Target completion date (YYYY-MM-DD)'
        required: false
        type: string
      study_lead_selection:
        description: 'Select Study Lead'
        required: true
        type: choice
        options:
          - 'Add new Study Lead'
      new_lead_name:
        description: 'New Study Lead name'
        required: false
        type: string
      new_lead_github:
        description: 'New Study Lead GitHub sername'
        required: false
        type: string

# Per briefing/actions/permissions.md - minimal permissions
permissions:
  contents: write
  issues: write
  repository-projects: write

jobs:
  provision:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve study lead information
        id: resolve_lead
        uses: ./.github/actions/manage-study-leads
        with:
          operation: validate
          selected_lead: ${{ inputs.study_lead_selection }}
          lead_name: ${{ inputs.new_lead_name }}
          lead_github: ${{ inputs.new_lead_github }}

      - name: Add new study lead to database
        if: inputs.study_lead_selection == 'Add new Study Lead'
        uses: ./.github/actions/manage-study-leads
        with:
          operation: add
          lead_name: ${{ inputs.new_lead_name }}
          lead_github: ${{ inputs.new_lead_github }}

      - name: Commit updated study leads data
        if: inputs.study_lead_selection == 'Add new Study Lead'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/data/study-leads.json
          git diff --staged --quiet || git commit -m "Add new study lead: ${{ inputs.new_lead_name }}"
          git push

      - name: Validate inputs
        id: validate
        uses: ./.github/actions/validate-study-inputs
        with:
          study_title: ${{ inputs.study_title }}
          lead_name: ${{ steps.resolve_lead.outputs.lead_name }}
          lead_github: ${{ steps.resolve_lead.outputs.lead_github }}
          target_date: ${{ steps.validate.outputs.target_date }}

      - name: Create repository
        id: repo
        uses: ./.github/actions/create-study-repository
        with:
          repo_name: ${{ steps.validate.outputs.repo_name }}
          study_title: ${{ inputs.study_title }}
          lead_github: ${{ steps.resolve_lead.outputs.lead_github }}
          org_token: ${{ secrets.ORG_ADMIN_TOKEN }}

      - name: Setup project
        id: project
        uses: ./.github/actions/setup-study-project
        with:
          repo_name: ${{ steps.validate.outputs.repo_name }}
          study_title: ${{ inputs.study_title }}
          org_token: ${{ secrets.ORG_ADMIN_TOKEN }}

      - name: Invite study lead as collaborator
        id: invite
        uses: ./.github/actions/invite-collaborator
        with:
          lead_github: ${{ steps.resolve_lead.outputs.lead_github }}
          permission: read
          org_token: ${{ secrets.ORG_ADMIN_TOKEN }}

      - name: Create Factory tracking
        id: tracking
        uses: ./.github/actions/create-factory-tracking
        with:
          study_title: ${{ inputs.study_title }}
          lead_name: ${{ steps.resolve_lead.outputs.lead_name }}
          lead_github: ${{ steps.resolve_lead.outputs.lead_github }}
          start_date: ${{ steps.validate.outputs.start_date }}
          target_date: ${{ steps.validate.outputs.target_date }}
          repo_url: ${{ steps.repo.outputs.repo_url }}
          already_collaborator: ${{ steps.invite.outputs.already_collaborator }}
          invitation_sent: ${{ steps.invite.outputs.invitation_sent }}
          org_token: ${{ secrets.ORG_ADMIN_TOKEN }}

      - name: Add to Factory project
        uses: ./.github/actions/add-to-factory-project
        with:
          issue_node_id: ${{ steps.tracking.outputs.issue_node_id }}
          study_title: ${{ inputs.study_title }}
          factory_project_number: ${{ vars.FACTORY_PROJECT_NUMBER }}
          lead_name: ${{ steps.resolve_lead.outputs.lead_name }}
          repo_url: ${{ steps.repo.outputs.repo_url }}
          start_date: ${{ steps.validate.outputs.start_date }}
          target_date: ${{ steps.validate.outputs.target_date }}
          org_token: ${{ secrets.ORG_ADMIN_TOKEN }}

      - name: Extract Factory issue number
        id: extract_issue_number
        run: |
          ISSUE_URL="${{ steps.tracking.outputs.issue_url }}"
          ISSUE_NUMBER=$(echo "$ISSUE_URL" | grep -o '[0-9]*$')
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT

      - name: Create status tracking issues
        id: status_issues
        uses: ./.github/actions/create-status-issues
        with:
          repo_name: ${{ steps.validate.outputs.repo_name }}
          study_title: ${{ inputs.study_title }}
          project_id: ${{ steps.project.outputs.project_id }}
          lead_github: ${{ steps.resolve_lead.outputs.lead_github }}
          factory_issue_number: ${{ steps.extract_issue_number.outputs.issue_number }}
          org_token: ${{ secrets.ORG_ADMIN_TOKEN }}

      - name: Configure study repository secrets
        env:
          GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN }}
        run: |
          echo "üîë Setting up study repository secrets..."
          
          # Set the ORG_ADMIN_TOKEN secret so workflows can update Factory
          echo "Setting ORG_ADMIN_TOKEN secret for Factory updates..."
          gh secret set ORG_ADMIN_TOKEN \
            --body "${{ secrets.ORG_ADMIN_TOKEN }}" \
            --repo "${{ github.repository_owner }}/${{ steps.validate.outputs.repo_name }}"
          
          # Set Factory project URL variable for direct project access
          echo "Setting FACTORY_PROJECT_URL variable for direct project access..."
          if [[ -n "${{ vars.FACTORY_PROJECT_URL }}" ]]; then
            gh variable set FACTORY_PROJECT_URL \
              --body "${{ vars.FACTORY_PROJECT_URL }}" \
              --repo "${{ github.repository_owner }}/${{ steps.validate.outputs.repo_name }}"
          else
            echo "‚ö†Ô∏è FACTORY_PROJECT_URL variable not set in Factory repo, using fallback method"
          fi
          
          echo "‚úÖ Study repository secrets and variables configured"

      - name: Summary
        run: |
          echo "## ‚úÖ Study Provisioned Successfully"
          echo ""
          echo "**Repository:** ${{ steps.repo.outputs.repo_url }}"
          echo "**Project:** ${{ steps.project.outputs.project_url }}"
          echo "**Lead:** @${{ steps.resolve_lead.outputs.lead_github }}"
          echo "**Factory Tracking:** ${{ steps.tracking.outputs.issue_url }}"
          echo "**Status Issues:** ${{ steps.status_issues.outputs.issues_created }} created"
          echo ""
          echo "### Status Tracking System"
          echo "- ‚úÖ Status tracking issues created in study repository"
          echo "- ‚úÖ Issues assigned to study project (ordered by priority)"
          echo "- ‚úÖ Status feedback automation configured"
          echo "- ‚úÖ Repository secrets configured for Factory integration"
          echo "- üîÑ When issues are closed, Factory status will update automatically"
          echo ""
          echo "### Next Steps:"
          echo "1. Visit the repository and update the README"
          echo "2. Check the linked project board for status tracking issues"
          echo "3. Close status issues as milestones are reached"
          echo "4. Monitor Factory issue for status updates"