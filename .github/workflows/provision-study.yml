# Minimal study provisioning workflow - MVP version
# Per briefing/workflows/reusable.md and briefing/security/best-practices.md

name: Provision New Study

on:
  workflow_dispatch:
    inputs:
      study_title:
        description: 'Study title'
        required: true
        type: string
      lead_name:
        description: 'Study lead name'
        required: true
        type: string
      lead_github:
        description: 'Study lead GitHub username'
        required: true
        type: string
      target_date:
        description: 'Target completion date (YYYY-MM-DD)'
        required: true
        type: string

# Per briefing/actions/permissions.md - minimal permissions
permissions:
  contents: read
  issues: write

jobs:
  provision:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN }}
    
    steps:
      - name: Validate inputs
        run: |
          # Validate date format
          if ! date -d "${{ inputs.target_date }}" >/dev/null 2>&1; then
            echo "‚ùå Invalid date format. Use YYYY-MM-DD"
            exit 1
          fi
          echo "‚úÖ Inputs validated"

      - name: Create study repository
        id: create_repo
        run: |
          # Generate repo name from title
          REPO_NAME=$(echo "study-${{ inputs.study_title }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g')
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          
          # Create repo from template
          gh repo create "${{ github.repository_owner }}/$REPO_NAME" \
            --template "${{ github.repository_owner }}/study-template" \
            --private \
            --description "OHDSI Study: ${{ inputs.study_title }}"
          
          # Add study lead as admin (skip if they're the repo owner)
          if [[ "${{ inputs.lead_github }}" != "${{ github.repository_owner }}" ]]; then
            gh api repos/${{ github.repository_owner }}/$REPO_NAME/collaborators/${{ inputs.lead_github }} \
              --method PUT \
              --field permission=admin
            echo "‚úÖ Added ${{ inputs.lead_github }} as admin"
          else
            echo "‚úÖ Study lead is repo owner, skipping collaborator addition"
          fi
          
          echo "‚úÖ Created repository: $REPO_NAME"

      - name: Create study project
        id: create_project
        run: |
          # Create a new project for the study
          PROJECT_TITLE="Study: ${{ inputs.study_title }}"
          REPO_NAME="${{ steps.create_repo.outputs.repo_name }}"
          
          # Create project under the repository owner
          PROJECT_URL=$(gh project create \
            --owner "${{ github.repository_owner }}" \
            --title "$PROJECT_TITLE" \
            --format json | jq -r '.url')
          
          # Link the project to the repository
          gh project link "$PROJECT_URL" \
            --repo "${{ github.repository_owner }}/$REPO_NAME" || \
          echo "‚ö†Ô∏è Project created but linking failed - you can link manually"
          
          echo "project_url=$PROJECT_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Created project: $PROJECT_TITLE"
          echo "üìã Project URL: $PROJECT_URL"

      - name: Create Factory tracking issue
        id: factory_issue
        run: |
          # Ensure study-tracking label exists
          gh label create "study-tracking" \
            --description "Tracks individual study progress" \
            --color "0969da" \
            --repo "${{ github.repository }}" || echo "Label already exists"
          
          # Create tracking issue in Factory repo
          ISSUE_BODY=$(cat <<EOF
          ## Study: ${{ inputs.study_title }}
          
          **Repository:** https://github.com/${{ github.repository_owner }}/${{ steps.create_repo.outputs.repo_name }}
          **Lead:** ${{ inputs.lead_name }} (@${{ inputs.lead_github }})
          **Target Date:** ${{ inputs.target_date }}
          **Status:** üü¢ Active
          
          ### Current Stage
          - [x] Base Camp
          - [ ] Protocol Development
          - [ ] Phenotype Development
          - [ ] Analysis Specifications
          - [ ] Network Execution
          - [ ] Results Evaluation
          
          ### Activity
          Last updated: $(date -u +"%Y-%m-%d %H:%M UTC")
          
          ---
          *This issue tracks the study progress. Updates are automated.*
          EOF
          )
          
          ISSUE_URL=$(gh issue create \
            --repo "${{ github.repository }}" \
            --title "Study: ${{ inputs.study_title }}" \
            --body "$ISSUE_BODY" \
            --label "study-tracking" \
            --format json | jq -r '.url')
          
          echo "issue_url=$ISSUE_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Created Factory tracking issue: $ISSUE_URL"

      - name: Add issue to Factory Portfolio project
        run: |
          # Add the tracking issue to the Factory Portfolio project
          # Using the FACTORY_PROJECT_NUMBER variable if it exists
          if [[ -n "${{ vars.FACTORY_PROJECT_NUMBER }}" ]]; then
            PROJECT_NUMBER="${{ vars.FACTORY_PROJECT_NUMBER }}"
            
            # Get the issue number from the URL
            ISSUE_NUMBER=$(echo "${{ steps.factory_issue.outputs.issue_url }}" | grep -o '[0-9]*$')
            
            # Add issue to project
            gh project item-add "$PROJECT_NUMBER" \
              --owner "${{ github.repository_owner }}" \
              --url "${{ steps.factory_issue.outputs.issue_url }}" || \
            echo "‚ö†Ô∏è Could not add issue to Factory project #$PROJECT_NUMBER"
            
            echo "‚úÖ Added tracking issue to Factory Portfolio project #$PROJECT_NUMBER"
          else
            echo "‚ö†Ô∏è FACTORY_PROJECT_NUMBER not set, skipping project association"
          fi

      - name: Summary
        run: |
          echo "## ‚úÖ Study Provisioned Successfully"
          echo ""
          echo "**Repository:** https://github.com/${{ github.repository_owner }}/${{ steps.create_repo.outputs.repo_name }}"
          echo "**Project:** ${{ steps.create_project.outputs.project_url }}"
          echo "**Lead:** @${{ inputs.lead_github }}"
          echo ""
          echo "### Next Steps:"
          echo "1. Visit the repository and update the README"
          echo "2. Check the project board for stage tracking"
          echo "3. Begin Base Camp stage"
          echo "4. Add data partners as needed"