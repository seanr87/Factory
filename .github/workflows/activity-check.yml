# Simple Factory sync workflow - MVP version
# Per briefing/workflows/reusable.md and briefing/security/best-practices.md

name: Factory Sync

on:
  schedule:
    # Daily at 9 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch:

# Per briefing/actions/permissions.md - minimal permissions
permissions:
  contents: read
  issues: write

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Find study tracking issues
        id: find_issues
        run: |
          # Get all open study tracking issues
          gh issue list \
            --repo "${{ github.repository }}" \
            --label "study-tracking" \
            --state open \
            --json number,title,body \
            --jq '.[] | @json' > issues.jsonl
          
          echo "Found $(wc -l < issues.jsonl) study tracking issues"

      - name: Gather study activity data
        run: |
          # Process each tracking issue and collect data for GraphQL updates
          echo "[]" > issue_updates.json
          
          while IFS= read -r issue_json; do
            issue=$(echo "$issue_json" | jq -r '.')
            number=$(echo "$issue" | jq -r '.number')
            title=$(echo "$issue" | jq -r '.title')
            body=$(echo "$issue" | jq -r '.body')
            
            # Extract repo URL from body
            repo_url=$(echo "$body" | grep -oP 'Repository: \Khttps://github.com/[^/]+/[^\s]+' | head -1)
            
            if [[ -n "$repo_url" ]]; then
              repo_name=$(echo "$repo_url" | sed 's|https://github.com/||')
              
              # Get last commit date
              last_activity=$(gh api repos/$repo_name --jq '.pushed_at' 2>/dev/null || echo "unknown")
              
              if [[ "$last_activity" != "unknown" ]]; then
                # Calculate days since last activity
                last_date=$(date -d "$last_activity" +%s)
                now=$(date +%s)
                days_inactive=$(( (now - last_date) / 86400 ))
                
                # Determine status using shortcodes
                if [[ $days_inactive -gt 30 ]]; then
                  status_shortcode=":red_circle:"
                  status_text="Inactive ($days_inactive days)"
                elif [[ $days_inactive -gt 14 ]]; then
                  status_shortcode=":yellow_circle:"
                  status_text="Low Activity ($days_inactive days)"
                else
                  status_shortcode=":green_circle:"
                  status_text="Active"
                fi
                
                # Clean existing emoji/shortcodes from title
                base_title=$(echo "$title" | sed -E 's/^(üü¢|üü°|üî¥|:green_circle:|:yellow_circle:|:red_circle:)[[:space:]]*//')
                new_title="${status_shortcode} ${base_title}"
                
                # Update issue body with new timestamp and status
                updated_body=$(echo "$body" | sed "s|Last updated:.*|Last updated: $(date -u +"%Y-%m-%d %H:%M UTC")|")
                updated_body=$(echo "$updated_body" | sed "s|Status:.*|Status: ${status_shortcode} ${status_text}|")
                
                # Add to update list
                update_data=$(jq -n \
                  --arg number "$number" \
                  --arg title "$new_title" \
                  --arg body "$updated_body" \
                  --arg status "$status_shortcode" \
                  '{number: $number, title: $title, body: $body, status: $status}')
                
                jq --argjson update "$update_data" '. += [$update]' issue_updates.json > tmp.json && mv tmp.json issue_updates.json
                
                echo "üìù Prepared update for issue #$number: '$title' -> '$new_title'"
              else
                echo "‚ö†Ô∏è  Could not check repo: $repo_name"
              fi
            fi
          done < issues.jsonl
          
          echo "üìä Prepared $(jq length issue_updates.json) issue updates"

      - name: Update issues and portfolio with GraphQL
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_ADMIN_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read the updates prepared in previous step
            const updatesFile = 'issue_updates.json';
            let updates = [];
            
            try {
              const data = fs.readFileSync(updatesFile, 'utf8');
              updates = JSON.parse(data);
              console.log(`üìä Processing ${updates.length} issue updates`);
            } catch (error) {
              console.log(`‚ö†Ô∏è No update data found: ${error.message}`);
              return;
            }
            
            if (updates.length === 0) {
              console.log("‚ÑπÔ∏è No issues to update");
              return;
            }
            
            // Process each issue update
            let successCount = 0;
            let failureCount = 0;
            
            for (const update of updates) {
              try {
                console.log(`üîÑ Updating issue #${update.number}: ${update.title}`);
                
                // Update issue using GraphQL
                const updateMutation = `
                  mutation UpdateIssue($issueId: ID!, $title: String!, $body: String!) {
                    updateIssue(input: {
                      id: $issueId,
                      title: $title,
                      body: $body
                    }) {
                      issue {
                        id
                        number
                        title
                      }
                    }
                  }
                `;
                
                // First, get the issue ID from the issue number
                const issueQuery = `
                  query GetIssue($owner: String!, $name: String!, $number: Int!) {
                    repository(owner: $owner, name: $name) {
                      issue(number: $number) {
                        id
                        title
                      }
                    }
                  }
                `;
                
                const [owner, repo] = "${{ github.repository }}".split('/');
                const issueResult = await github.graphql(issueQuery, {
                  owner: owner,
                  name: repo,
                  number: parseInt(update.number)
                });
                
                if (!issueResult.repository.issue) {
                  console.log(`‚ùå Issue #${update.number} not found`);
                  failureCount++;
                  continue;
                }
                
                const issueId = issueResult.repository.issue.id;
                const oldTitle = issueResult.repository.issue.title;
                
                // Update the issue
                await github.graphql(updateMutation, {
                  issueId: issueId,
                  title: update.title,
                  body: update.body
                });
                
                console.log(`‚úÖ Updated issue #${update.number}: '${oldTitle}' -> '${update.title}'`);
                successCount++;
                
              } catch (error) {
                console.log(`‚ùå Failed to update issue #${update.number}: ${error.message}`);
                failureCount++;
              }
            }
            
            console.log(`üìä Completed: ${successCount} successful, ${failureCount} failed`);
            
            // Portfolio project updates (optional)
            const factoryNumber = parseInt("${{ vars.FACTORY_PROJECT_NUMBER }}", 10);
            
            if (!factoryNumber) {
              console.log("‚ÑπÔ∏è FACTORY_PROJECT_NUMBER not set, skipping portfolio updates");
              return;
            }
            
            console.log(`üìã Portfolio project #${factoryNumber} updates:`);
            console.log("üí° GitHub Projects should automatically reflect the updated issue titles");
            console.log("‚ÑπÔ∏è If project titles don't sync, manual project item updates may be needed");

      - name: Summary
        run: |
          total=$(wc -l < issues.jsonl)
          echo "## üìä Factory Sync Complete"
          echo "Processed $total study tracking issues"
          echo "Next sync: tomorrow at 9 AM UTC"