name: Update Factory Status

on:
  repository_dispatch:
    types: [study-status-update, update-factory-objective]

permissions:
  contents: read
  issues: write
  repository-projects: write

jobs:
  update-status:
    runs-on: ubuntu-latest
    if: github.event.client_payload.factory_issue_number && (github.event.client_payload.new_status || github.event.client_payload.new_objective)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update Factory Objective field
        if: github.event.client_payload.new_objective
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_ADMIN_TOKEN }}
          script: |
            const factoryIssueNumber = "${{ github.event.client_payload.factory_issue_number }}";
            const newObjective = "${{ github.event.client_payload.new_objective }}";
            const studyRepo = "${{ github.event.client_payload.study_repo }}";
            const issueTitle = "${{ github.event.client_payload.issue_title }}";
            const issueUrl = "${{ github.event.client_payload.issue_url }}";
            const issueAction = "${{ github.event.client_payload.issue_action }}";
            
            console.log(`Updating Factory issue #${factoryIssueNumber} Objective to: ${newObjective}`);
            
            try {
              // Get the Factory Portfolio project ID
              const projects = await github.rest.repos.listForOrg({
                org: context.repo.owner,
                type: 'public'
              });
              
              // Find the issue to get its node_id
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(factoryIssueNumber)
              });
              
              const issueNodeId = issue.data.node_id;
              
              // Get the Factory Portfolio project - we'll need to find it by name
              const orgProjects = await github.graphql(`
                query($org: String!) {
                  organization(login: $org) {
                    projectsV2(first: 10) {
                      nodes {
                        id
                        title
                        fields(first: 20) {
                          nodes {
                            ... on ProjectV2SingleSelectField {
                              id
                              name
                              options {
                                id
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `, { org: context.repo.owner });
              
              // Find the Factory Portfolio project
              const portfolioProject = orgProjects.organization.projectsV2.nodes.find(
                project => project.title === 'Factory Portfolio'
              );
              
              if (!portfolioProject) {
                throw new Error('Factory Portfolio project not found');
              }
              
              // Find the Objective field
              const objectiveField = portfolioProject.fields.nodes.find(
                field => field.name === 'Objective'
              );
              
              if (!objectiveField) {
                throw new Error('Objective field not found in Factory Portfolio project');
              }
              
              // Find the objective option
              const objectiveOption = objectiveField.options.find(
                option => option.name === newObjective
              );
              
              if (!objectiveOption) {
                throw new Error(`Objective option '${newObjective}' not found`);
              }
              
              // Get the project item for this issue
              const projectItems = await github.graphql(`
                query($projectId: ID!, $issueNodeId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 100) {
                        nodes {
                          id
                          content {
                            ... on Issue {
                              id
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `, {
                projectId: portfolioProject.id,
                issueNodeId: issueNodeId
              });
              
              const projectItem = projectItems.node.items.nodes.find(
                item => item.content && item.content.id === issueNodeId
              );
              
              if (!projectItem) {
                throw new Error(`Issue not found in Factory Portfolio project`);
              }
              
              // Update the Objective field
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `, {
                projectId: portfolioProject.id,
                itemId: projectItem.id,
                fieldId: objectiveField.id,
                optionId: objectiveOption.id
              });
              
              // Add a comment to the Factory issue
              let commentBody;
              if (issueAction === 'closed') {
                commentBody = `ðŸŽ¯ **Objective Updated:** ${newObjective}\n\nStudy milestone completed in [${studyRepo}](https://github.com/${studyRepo}):\n- Closed: [${issueTitle}](${issueUrl})\n\nObjective field updated automatically by the study tracking system.`;
              } else {
                commentBody = `ðŸŽ¯ **Objective Updated:** ${newObjective}\n\nStudy status changed in [${studyRepo}](https://github.com/${studyRepo}):\n- Issue: [${issueTitle}](${issueUrl})\n- Action: ${issueAction}\n\nObjective field updated automatically by the study tracking system.`;
              }
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(factoryIssueNumber),
                body: commentBody
              });
              
              console.log(`âœ… Successfully updated Factory issue #${factoryIssueNumber} Objective to: ${newObjective}`);
              
            } catch (error) {
              console.error('Error updating Factory Objective:', error);
              core.setFailed(`Failed to update Factory Objective: ${error.message}`);
            }

      - name: Update Factory issue status
        if: github.event.client_payload.new_status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_ADMIN_TOKEN }}
          script: |
            const factoryIssueNumber = "${{ github.event.client_payload.factory_issue_number }}";
            const newStatus = "${{ github.event.client_payload.new_status }}";
            const studyRepo = "${{ github.event.client_payload.study_repo }}";
            const closedIssueTitle = "${{ github.event.client_payload.closed_issue_title }}";
            const closedIssueUrl = "${{ github.event.client_payload.closed_issue_url }}";
            
            console.log(`Updating Factory issue #${factoryIssueNumber} to status: ${newStatus}`);
            
            try {
              // Get current issue
              const currentIssue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(factoryIssueNumber)
              });
              
              // Extract current body and update status section
              let updatedBody = currentIssue.data.body;
              
              // Update the status in the body
              const statusEmoji = 'ðŸŸ¡';
              updatedBody = updatedBody.replace(
                /\*\*Status:\*\* [^\n]+/,
                `**Status:** ${statusEmoji} ${newStatus}`
              );
              
              // Add activity log entry
              const activitySection = /### Activity\n(.*?)(\n---|\n\*This issue tracks|$)/s;
              const currentDate = new Date().toISOString().split('T')[0];
              const newActivity = `Last updated: ${currentDate}\nStatus updated to **${newStatus}** (triggered by: [${closedIssueTitle}](${closedIssueUrl}) in ${studyRepo})`;
              
              if (activitySection.test(updatedBody)) {
                updatedBody = updatedBody.replace(
                  activitySection,
                  `### Activity\n${newActivity}\n\n$2`
                );
              } else {
                // If no activity section exists, add it before the footer
                updatedBody = updatedBody.replace(
                  /(---\n\*This issue tracks.*)/,
                  `### Activity\n${newActivity}\n\n$1`
                );
              }
              
              // Update the issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(factoryIssueNumber),
                body: updatedBody
              });
              
              // Add a comment to the Factory issue
              const targetEmoji = 'ðŸŽ¯';
              const commentBody = `${targetEmoji} **Status Update:** ${newStatus}\n\nStudy milestone completed in [${studyRepo}](https://github.com/${studyRepo}):\n- Closed: [${closedIssueTitle}](${closedIssueUrl})\n\nThis status change was triggered automatically by the study status tracking system.`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(factoryIssueNumber),
                body: commentBody
              });
              
              console.log(`âœ… Successfully updated Factory issue #${factoryIssueNumber}`);
              
            } catch (error) {
              console.error('Error updating Factory issue:', error);
              core.setFailed(`Failed to update Factory issue: ${error.message}`);
            }