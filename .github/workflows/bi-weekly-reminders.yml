name: Bi-Weekly Study Reminders

on:
  # Run every two weeks on Monday at 9 AM UTC
  schedule:
    - cron: "0 9 * * 1/14"
  
  # Manual trigger for testing and maintenance
  workflow_dispatch:
    inputs:
      specific_study:
        description: 'Test with specific study (format: owner/repo, optional)'
        required: false
        type: string

permissions:
  contents: read
  issues: write

jobs:
  send_reminders:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN }}
      ORG_LOGIN: ${{ github.repository_owner }}
      FACTORY_REPO: ${{ github.repository }}
    
    steps:
      - name: Checkout Factory repository
        uses: actions/checkout@v4

      - name: Send bi-weekly reminders
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const factoryRepo = process.env.FACTORY_REPO;
            const [factoryOwner, factoryRepoName] = factoryRepo.split('/');
            const specificStudy = "${{ inputs.specific_study }}" || null;
            const factoryProjectNumber = parseInt("${{ vars.FACTORY_PROJECT_NUMBER }}", 10);
            
            console.log('🔔 Starting bi-weekly reminder system...');
            console.log(`Factory project number: ${factoryProjectNumber}`);
            
            if (!factoryProjectNumber) {
              console.error('❌ FACTORY_PROJECT_NUMBER variable not set');
              core.setFailed('FACTORY_PROJECT_NUMBER variable not set');
              return;
            }
            
            try {
              // Get Factory Portfolio Project
              const project = await github.graphql(`
                query($owner: String!, $number: Int!) {
                  user(login: $owner) {
                    projectV2(number: $number) {
                      id
                      title
                      items(first: 100) {
                        nodes {
                          id
                          content {
                            ... on Issue {
                              id
                              number
                              title
                              state
                              assignees(first: 10) {
                                nodes {
                                  login
                                }
                              }
                            }
                          }
                          fieldValues(first: 20) {
                            nodes {
                              ... on ProjectV2ItemFieldTextValue {
                                text
                                field {
                                  ... on ProjectV2FieldCommon {
                                    name
                                  }
                                }
                              }
                              ... on ProjectV2ItemFieldSingleSelectValue {
                                name
                                field {
                                  ... on ProjectV2FieldCommon {
                                    name
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `, {
                owner: factoryOwner,
                number: factoryProjectNumber
              });
              
              const factoryProject = project.user.projectV2;
              if (!factoryProject) {
                throw new Error(`Factory project #${factoryProjectNumber} not found`);
              }
              
              console.log(`Found Factory Portfolio Project: ${factoryProject.title}`);
              console.log(`Processing ${factoryProject.items.nodes.length} project items`);
              
              for (const projectItem of factoryProject.items.nodes) {
                if (!projectItem.content || projectItem.content.state !== 'open') {
                  continue; // Skip non-issue items or closed issues
                }
                
                const factoryIssue = projectItem.content;
                console.log(`\n📋 Processing: ${factoryIssue.title} (#${factoryIssue.number})`);
                
                try {
                  // Extract Study Repo field from project item
                  let studyRepo = null;
                  let currentObjectiveField = null;
                  
                  for (const fieldValue of projectItem.fieldValues.nodes) {
                    if (fieldValue.field?.name === 'Study Repo' && fieldValue.text) {
                      // Extract repo from URL like https://github.com/owner/repo
                      const repoMatch = fieldValue.text.match(/github\.com\/([^\/\s\)]+\/[^\/\s\)]+)/);
                      if (repoMatch) {
                        studyRepo = repoMatch[1];
                      }
                    }
                    if (fieldValue.field?.name === 'Objective' && fieldValue.name) {
                      currentObjectiveField = fieldValue.name;
                    }
                  }
                  
                  if (!studyRepo) {
                    console.log('⚠️ Could not find Study Repo field in project item');
                    continue;
                  }
                  
                  const [studyOwner, studyRepoName] = studyRepo.split('/');
                  
                  // If specific study requested, only process that one
                  if (specificStudy && studyRepo !== specificStudy) {
                    console.log(`⏩ Skipping ${studyRepo} (specific study filter active)`);
                    continue;
                  }
                  
                  console.log(`🔍 Study repo: ${studyRepo}`);
                  console.log(`🎯 Current objective from project: ${currentObjectiveField || 'None set'}`);
                  
                  // Get current status-tracking issues from study repo
                  let statusIssues = { data: [] };
                  let currentObjective = null;
                  let objectiveDuration = null;
                  
                  try {
                    statusIssues = await github.rest.issues.listForRepo({
                      owner: studyOwner,
                      repo: studyRepoName,
                      labels: 'status-tracking',
                      state: 'all',
                      per_page: 10
                    });
                    
                    console.log(`📊 Found ${statusIssues.data.length} status-tracking issues`);
                  } catch (repoError) {
                    console.log(`⚠️ Could not access study repo ${studyRepo}: ${repoError.message}`);
                    console.log('   Continuing with project objective info only...');
                  }
                  
                  // Find current active objective
                  if (statusIssues.data.length > 0) {
                    // Sort by order (extract number from title like "1) Analysis Package Prototype")
                    const sortedIssues = statusIssues.data.sort((a, b) => {
                      const aOrder = parseInt(a.title.match(/^(\d+)\)/) ? a.title.match(/^(\d+)\)/)[1] : 999);
                      const bOrder = parseInt(b.title.match(/^(\d+)\)/) ? b.title.match(/^(\d+)\)/)[1] : 999);
                      return aOrder - bOrder;
                    });
                    
                    // Find current objective (first open issue in sequence, or last updated if all closed)
                    currentObjective = sortedIssues.find(issue => issue.state === 'open') || sortedIssues[sortedIssues.length - 1];
                    
                    if (currentObjective) {
                      // Calculate how long they've been on this objective
                      const objectiveStartDate = new Date(currentObjective.created_at);
                      const now = new Date();
                      const diffTime = Math.abs(now - objectiveStartDate);
                      const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
                      const diffWeeks = Math.floor(diffDays / 7);
                      
                      if (diffWeeks > 0) {
                        objectiveDuration = `${diffWeeks} week${diffWeeks !== 1 ? 's' : ''}`;
                      } else {
                        objectiveDuration = `${diffDays} day${diffDays !== 1 ? 's' : ''}`;
                      }
                      
                      console.log(`📅 Objective duration: ${objectiveDuration}`);
                    }
                  } else if (currentObjectiveField) {
                    // Use project field if no status issues found
                    console.log('📋 Using objective from Factory project field');
                  }
                  
                  // Get assignees from Factory issue  
                  const assignees = factoryIssue.assignees?.nodes || [];
                  const assigneeList = assignees.map(user => `@${user.login}`).join(' ');
                  
                  // Build reminder comment
                  let reminderComment = `## 🔔 Bi-Weekly Study Check-In\n\n`;
                  reminderComment += `Hi there! 👋 This is your friendly bi-weekly reminder to check in on study progress.\n\n`;
                  
                  if (assigneeList) {
                    reminderComment += `${assigneeList} - hope you're doing well!\n\n`;
                  }
                  
                  // Display current objective info
                  if (currentObjective) {
                    const objectiveName = currentObjective.title.replace(/^\d+\)\s*/, ''); // Remove order number
                    const status = currentObjective.state === 'closed' ? '✅ Complete' : '🔄 In Progress';
                    
                    reminderComment += `### 🎯 Current Objective\n`;
                    reminderComment += `**${objectiveName}** (${status})\n`;
                    reminderComment += `📅 Working on this objective for: **${objectiveDuration}**\n`;
                    reminderComment += `🔗 [View objective details](${currentObjective.html_url})\n\n`;
                  } else if (currentObjectiveField) {
                    reminderComment += `### 🎯 Current Objective\n`;
                    reminderComment += `**${currentObjectiveField}** (from Factory project)\n`;
                    reminderComment += `🔗 [View study repository](https://github.com/${studyRepo})\n\n`;
                  } else {
                    reminderComment += `### ⚠️ No Current Objective Found\n`;
                    reminderComment += `It looks like objectives may not be set up yet for this study.\n\n`;
                  }
                  
                  reminderComment += `### 💬 How Can We Help?\n`;
                  reminderComment += `- Are you blocked on anything?\n`;
                  reminderComment += `- Do you need additional resources or support?\n`;
                  reminderComment += `- Any questions about the current objective or next steps?\n\n`;
                  reminderComment += `Feel free to comment below or reach out to the Factory team if you need assistance! 🚀\n\n`;
                  reminderComment += `---\n`;
                  reminderComment += `*This is an automated bi-weekly check-in. You can view all study progress in the [Factory Project](https://github.com/${factoryOwner}/${factoryRepoName}/projects).*`;
                  
                  // Add the comment to the Factory issue
                  await github.rest.issues.createComment({
                    owner: factoryOwner,
                    repo: factoryRepoName,
                    issue_number: factoryIssue.number,
                    body: reminderComment
                  });
                  
                  console.log(`✅ Posted reminder comment to Factory issue #${factoryIssue.number}`);
                  
                  // Brief delay between comments to be nice to the API
                  await new Promise(resolve => setTimeout(resolve, 1000));
                  
                } catch (error) {
                  console.error(`❌ Failed to process Factory issue #${factoryIssue.number}:`, error.message);
                  // Continue with other issues rather than failing
                }
              }
              
              console.log('\n🎉 Bi-weekly reminder system completed successfully!');
              
            } catch (error) {
              console.error('❌ Failed to run bi-weekly reminders:', error);
              core.setFailed(`Failed to send bi-weekly reminders: ${error.message}`);
            }