name: 'Update Workflow Dropdown'
description: 'Updates the provision-study workflow dropdown with current study leads'
inputs:
  workflow_path:
    description: 'Path to the workflow file to update'
    required: true
    default: '.github/workflows/provision-study.yml'

runs:
  using: 'composite'
  steps:
    - name: Update dropdown options
      shell: bash
      run: |
        echo "üîç Starting workflow dropdown update..."
        
        # Check if study leads file exists
        if [[ ! -f .github/data/study-leads.json ]]; then
          echo "‚ùå No study leads file found, skipping update"
          exit 0
        fi
        
        echo "üìñ Reading study leads from JSON..."
        cat .github/data/study-leads.json
        
        # Count study leads
        LEAD_COUNT=$(jq '.study_leads | length' .github/data/study-leads.json)
        echo "üìä Found $LEAD_COUNT study leads"
        
        if [[ $LEAD_COUNT -eq 0 ]]; then
          echo "‚ö†Ô∏è  No study leads found, keeping only 'Add new study lead' option"
          OPTIONS_CONTENT="          - 'Add new study lead'"
        else
          echo "üîÑ Generating dropdown options..."
          
          # Generate dropdown options from JSON
          OPTIONS_CONTENT=""
          while IFS= read -r line; do
            NAME=$(echo "$line" | jq -r '.name')
            GITHUB=$(echo "$line" | jq -r '.github_username')
            echo "  Processing: $NAME ($GITHUB)"
            
            # Escape single quotes in name for YAML
            ESCAPED_NAME=$(echo "$NAME" | sed "s/'/''/g")
            OPTIONS_CONTENT="${OPTIONS_CONTENT}          - '${ESCAPED_NAME}|${GITHUB}'\n"
          done < <(jq -c '.study_leads[]' .github/data/study-leads.json)
          
          # Add "Add new study lead" option at the end
          OPTIONS_CONTENT="${OPTIONS_CONTENT}          - 'Add new study lead'"
        fi
        
        echo "üìù Generated options:"
        echo -e "$OPTIONS_CONTENT"
        
        # Update workflow using simple line-by-line approach
        echo "üîß Updating workflow file..."
        
        # Write new options to temp file
        echo -e "$OPTIONS_CONTENT" > /tmp/new_options.txt
        
        # Process the workflow file line by line
        IN_OPTIONS=false
        LINE_NUM=0
        while IFS= read -r line; do
          LINE_NUM=$((LINE_NUM + 1))
          echo "üîç Line $LINE_NUM: '$line' (IN_OPTIONS=$IN_OPTIONS)" >&2
          
          if [[ "$line" =~ ^[[:space:]]*options:[[:space:]]*$ ]]; then
            echo "üìù Found options line, writing new options" >&2
            echo "$line"
            cat /tmp/new_options.txt
            IN_OPTIONS=true
          elif [[ "$IN_OPTIONS" == true ]] && [[ "$line" =~ ^[[:space:]]{6}[a-zA-Z] ]]; then
            echo "üìù Found end of options section at line: '$line'" >&2
            echo "$line"
            IN_OPTIONS=false
          elif [[ "$IN_OPTIONS" == false ]]; then
            echo "üìù Normal line: '$line'" >&2
            echo "$line"
          else
            echo "üìù Skipping option line: '$line'" >&2
          fi
        done < "${{ inputs.workflow_path }}" > /tmp/workflow_temp.yml
        
        # Replace original file
        mv /tmp/workflow_temp.yml "${{ inputs.workflow_path }}"
        echo "‚úÖ Successfully updated workflow dropdown"
        
        # Cleanup
        rm -f /tmp/new_options.txt