name: 'Update Workflow Dropdown'
description: 'Updates the provision-study workflow dropdown with current study leads'
inputs:
  workflow_path:
    description: 'Path to the workflow file to update'
    required: true
    default: '.github/workflows/provision-study.yml'

runs:
  using: 'composite'
  steps:
    - name: Update dropdown options
      shell: bash
      run: |
        echo "üîç Starting workflow dropdown update..."
        
        # Check if study leads file exists
        if [[ ! -f .github/data/study-leads.json ]]; then
          echo "‚ùå No study leads file found, skipping update"
          exit 0
        fi
        
        echo "üìñ Reading study leads from JSON..."
        cat .github/data/study-leads.json
        
        # Count study leads
        LEAD_COUNT=$(jq '.study_leads | length' .github/data/study-leads.json)
        echo "üìä Found $LEAD_COUNT study leads"
        
        if [[ $LEAD_COUNT -eq 0 ]]; then
          echo "‚ö†Ô∏è  No study leads found, keeping only 'Add new study lead' option"
          OPTIONS_CONTENT="          - 'Add new study lead'"
        else
          echo "üîÑ Generating dropdown options..."
          
          # Generate dropdown options from JSON
          OPTIONS_CONTENT=""
          while IFS= read -r line; do
            NAME=$(echo "$line" | jq -r '.name')
            GITHUB=$(echo "$line" | jq -r '.github_username')
            echo "  Processing: $NAME ($GITHUB)"
            
            # Escape single quotes in name for YAML
            ESCAPED_NAME=$(echo "$NAME" | sed "s/'/''/g")
            OPTIONS_CONTENT="${OPTIONS_CONTENT}          - '${ESCAPED_NAME}|${GITHUB}'\n"
          done < <(jq -c '.study_leads[]' .github/data/study-leads.json)
          
          # Add "Add new study lead" option at the end
          OPTIONS_CONTENT="${OPTIONS_CONTENT}          - 'Add new study lead'"
        fi
        
        echo "üìù Generated options:"
        echo -e "$OPTIONS_CONTENT"
        
        # Create updated workflow using Python for more reliable YAML manipulation
        python3 -c "
import re
import sys
import os

workflow_path = '${{ inputs.workflow_path }}'
options_content = '''$OPTIONS_CONTENT'''

try:
    with open(workflow_path, 'r') as f:
        content = f.read()
    
    print(f'üîç Looking for study_lead_selection section in {workflow_path}')
    
    # Find the study_lead_selection section and replace options
    pattern = r'(      study_lead_selection:.*?\n        options:\n)(.*?\n)(      \w+:)'
    
    def replace_options(match):
        before = match.group(1)
        after = match.group(3)
        print(f'üìù Replacing options section')
        return before + options_content + '\n' + after
    
    # Check if pattern matches
    matches = re.findall(pattern, content, flags=re.DOTALL | re.MULTILINE)
    print(f'üîç Found {len(matches)} matches')
    
    updated_content = re.sub(pattern, replace_options, content, flags=re.DOTALL | re.MULTILINE)
    
    if updated_content != content:
        with open(workflow_path, 'w') as f:
            f.write(updated_content)
        print('‚úÖ Successfully updated workflow dropdown')
    else:
        print('‚ö†Ô∏è  No changes needed - workflow already up to date')
        
except Exception as e:
    print(f'‚ùå Error updating workflow: {e}')
    import traceback
    traceback.print_exc()
    sys.exit(1)
"