name: 'Add Issue to Factory Project'
description: 'Adds tracking issue to Factory Portfolio project'
inputs:
  issue_node_id:
    description: 'Issue node ID to add to project'
    required: true
  study_title:
    description: 'Study title for error messages'
    required: true
  factory_project_number:
    description: 'Factory Portfolio project number'
    required: true
  lead_name:
    description: 'Study lead name for custom field'
    required: true
  repo_url:
    description: 'Study repository URL for custom field'
    required: true
  start_date:
    description: 'Study start date'
    required: false
  target_date:
    description: 'Study target date'
    required: false
  org_token:
    description: 'Organization admin token'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Add to Factory Portfolio project
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.org_token }}
        script: |
          const factoryNumber = parseInt("${{ inputs.factory_project_number }}", 10);
          const owner = "${{ github.repository_owner }}";
          const issueNodeId = "${{ inputs.issue_node_id }}";
          const studyTitle = "${{ inputs.study_title }}";
          const leadName = "${{ inputs.lead_name }}";
          const repoUrl = "${{ inputs.repo_url }}";
          const startDate = "${{ inputs.start_date }}";
          const targetDate = "${{ inputs.target_date }}";
          
          console.log(`üîç Adding issue to Factory Portfolio project #${factoryNumber}`);
          
          if (!factoryNumber) {
            console.log("‚ö†Ô∏è FACTORY_PROJECT_NUMBER not set in repository variables");
            console.log("To fix: Settings ‚Üí Variables ‚Üí Repository variables ‚Üí Add 'FACTORY_PROJECT_NUMBER'");
            return;
          }
          
          try {
            // Query Factory project and custom fields
            const factoryResult = await github.graphql(`
              query($login: String!, $num: Int!) {
                user(login: $login) {
                  projectV2(number: $num) {
                    id
                    title
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, { login: owner, num: factoryNumber });
            
            const project = factoryResult.user.projectV2;
            if (!project) {
              console.log(`‚ùå Factory project #${factoryNumber} not found`);
              return;
            }
            
            console.log(`üìã Found project: ${project.title}`);
            
            // Find custom fields
            const leadField = project.fields.nodes.find(field => field.name === 'Lead');
            const studyRepoField = project.fields.nodes.find(field => field.name === 'Study Repo');
            const startDateField = project.fields.nodes.find(field => field.name === 'Start Date');
            const targetDateField = project.fields.nodes.find(field => field.name === 'Target Date');
            
            if (!leadField) {
              console.log(`‚ö†Ô∏è 'Lead' custom field not found in project`);
            }
            if (!studyRepoField) {
              console.log(`‚ö†Ô∏è 'Study Repo' custom field not found in project`);
            }
            if (!startDateField) {
              console.log(`‚ö†Ô∏è 'Start Date' custom field not found in project`);
            }
            if (!targetDateField) {
              console.log(`‚ö†Ô∏è 'Target Date' custom field not found in project`);
            }
            
            // Add issue to project
            const addResult = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {
                  projectId: $projectId,
                  contentId: $contentId
                }) {
                  item { id }
                }
              }
            `, {
              projectId: project.id,
              contentId: issueNodeId
            });
            
            const itemId = addResult.addProjectV2ItemById.item.id;
            console.log(`‚úÖ Added tracking issue to Factory Portfolio project`);
            
            // Set Lead field if it exists
            if (leadField) {
              try {
                await github.graphql(`
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: {
                        text: $value
                      }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `, {
                  projectId: project.id,
                  itemId: itemId,
                  fieldId: leadField.id,
                  value: leadName
                });
                console.log(`‚úÖ Set Lead field to: ${leadName}`);
              } catch (fieldError) {
                console.log(`‚ö†Ô∏è Failed to set Lead field: ${fieldError.message}`);
              }
            }
            
            // Set Study Repo field if it exists
            if (studyRepoField) {
              try {
                await github.graphql(`
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: {
                        text: $value
                      }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `, {
                  projectId: project.id,
                  itemId: itemId,
                  fieldId: studyRepoField.id,
                  value: repoUrl
                });
                console.log(`‚úÖ Set Study Repo field to: ${repoUrl}`);
              } catch (fieldError) {
                console.log(`‚ö†Ô∏è Failed to set Study Repo field: ${fieldError.message}`);
              }
            }
            
            // Set initial Objective field to 'Analysis Package Prototype'
            const objectiveField = project.fields.nodes.find(field => field.name === 'Objective');
            if (objectiveField) {
              try {
                const objectiveOption = objectiveField.options.find(option => option.name === 'Analysis Package Prototype');
                if (objectiveOption) {
                  await github.graphql(`
                    mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: $projectId,
                        itemId: $itemId,
                        fieldId: $fieldId,
                        value: { singleSelectOptionId: $optionId }
                      }) {
                        projectV2Item { id }
                      }
                    }
                  `, {
                    projectId: project.id,
                    itemId: itemId,
                    fieldId: objectiveField.id,
                    optionId: objectiveOption.id
                  });
                  console.log(`‚úÖ Set Objective field to: Analysis Package Prototype`);
                } else {
                  console.log(`‚ö†Ô∏è Objective option 'Analysis Package Prototype' not found`);
                }
              } catch (fieldError) {
                console.log(`‚ö†Ô∏è Failed to set Objective field: ${fieldError.message}`);
              }
            } else {
              console.log(`‚ö†Ô∏è Objective field not found in project`);
            }
            
            // Set Start Date field if it exists and date is provided
            if (startDateField && startDate) {
              try {
                await github.graphql(`
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: {
                        date: $value
                      }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `, {
                  projectId: project.id,
                  itemId: itemId,
                  fieldId: startDateField.id,
                  value: startDate
                });
                console.log(`‚úÖ Set Start Date field to: ${startDate}`);
              } catch (fieldError) {
                console.log(`‚ö†Ô∏è Failed to set Start Date field: ${fieldError.message}`);
              }
            }
            
            // Set Target Date field if it exists and date is provided
            if (targetDateField && targetDate) {
              try {
                await github.graphql(`
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: {
                        date: $value
                      }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `, {
                  projectId: project.id,
                  itemId: itemId,
                  fieldId: targetDateField.id,
                  value: targetDate
                });
                console.log(`‚úÖ Set Target Date field to: ${targetDate}`);
              } catch (fieldError) {
                console.log(`‚ö†Ô∏è Failed to set Target Date field: ${fieldError.message}`);
              }
            }
            
          } catch (error) {
            console.log(`‚ùå Failed to add issue to project: ${error.message}`);
            console.log("üîß MANUAL STEPS REQUIRED:");
            console.log(`1. Go to: https://github.com/users/${owner}/projects/${factoryNumber}`);
            console.log("2. Click '+ Add items'");
            console.log(`3. Search for: ${studyTitle}`);
          }