name: 'Create Study README'
description: 'Creates .github/README.md for study repository with objectives checklist and access instructions'
inputs:
  repo_name:
    description: 'Study repository name'
    required: true
  study_title:
    description: 'Study title for context'
    required: true
  lead_name:
    description: 'Study lead name'
    required: true
  lead_github:
    description: 'Study lead GitHub username'
    required: true
  factory_issue_number:
    description: 'Factory issue number for status updates'
    required: true
  project_url:
    description: 'Study project URL'
    required: true
  issues_data:
    description: 'JSON array of created status issues data'
    required: true
  org_token:
    description: 'Organization admin token'
    required: true

outputs:
  readme_created:
    description: 'Whether README was successfully created'
    value: ${{ steps.create_readme.outputs.readme_created }}

runs:
  using: 'composite'
  steps:
    - name: Create study README
      id: create_readme
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.org_token }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const repoOwner = "${{ github.repository_owner }}";
          const repoName = "${{ inputs.repo_name }}";
          const studyTitle = "${{ inputs.study_title }}";
          const leadName = "${{ inputs.lead_name }}";
          const leadGithub = "${{ inputs.lead_github }}";
          const factoryIssueNumber = "${{ inputs.factory_issue_number }}";
          const projectUrl = "${{ inputs.project_url }}";
          const factoryRepo = "${{ github.repository }}";
          const issuesDataJson = "${{ inputs.issues_data }}";
          
          // Parse the issues data
          let issuesData;
          try {
            issuesData = JSON.parse(issuesDataJson);
            console.log('✅ Parsed ' + issuesData.length + ' status issues data');
            
            // Validate issues data structure
            if (!Array.isArray(issuesData)) {
              throw new Error('Issues data must be an array');
            }
            
            for (const issue of issuesData) {
              if (!issue.number || !issue.title || !issue.order) {
                throw new Error('Invalid issue data: missing required fields (number: ' + issue.number + ', title: ' + issue.title + ', order: ' + issue.order + ')');
              }
              if (typeof issue.number !== 'number') {
                throw new Error('Issue number must be a number, got: ' + typeof issue.number);
              }
              if (typeof issue.title !== 'string') {
                throw new Error('Issue title must be a string, got: ' + typeof issue.title);
              }
              if (typeof issue.order !== 'number') {
                throw new Error('Issue order must be a number, got: ' + typeof issue.order);
              }
            }
            
            console.log('✅ Validated ' + issuesData.length + ' issues data structure');
            
          } catch (parseError) {
            console.error('❌ Failed to parse/validate issues data: ' + parseError.message);
            core.setFailed('Invalid issues data: ' + parseError.message);
            return;
          }
          
          // Generate objectives checklist with actual issue links
          const objectivesChecklist = issuesData
            .sort((a, b) => a.order - b.order)
            .map(issue => '- [ ] **' + issue.title + '** #' + issue.number)
            .join('\n');
          
          console.log('✅ Generated objectives checklist with ' + issuesData.length + ' linked issues');
          
          // Read the template file
          const templatePath = '.github/templates/study-readme.md';
          let readmeContent;
          
          try {
            const template = fs.readFileSync(templatePath, 'utf8');
            
            // Replace placeholders with actual values
            readmeContent = template
              .replace(/\{\{STUDY_TITLE\}\}/g, studyTitle)
              .replace(/\{\{OBJECTIVES_CHECKLIST\}\}/g, objectivesChecklist)
              .replace(/\{\{PROJECT_URL\}\}/g, projectUrl)
              .replace(/\{\{FACTORY_ISSUE_NUMBER\}\}/g, factoryIssueNumber)
              .replace(/\{\{FACTORY_REPO\}\}/g, factoryRepo)
              .replace(/\{\{LEAD_GITHUB\}\}/g, leadGithub)
              .replace(/\{\{LEAD_NAME\}\}/g, leadName)
              .replace(/\{\{CREATION_DATE\}\}/g, new Date().toISOString().split('T')[0]);
              
            console.log('✅ Loaded README template from ' + templatePath);
            
          } catch (templateError) {
            console.error('❌ Failed to load template: ' + templateError.message);
            core.setFailed('Template file not found: ' + templatePath);
            return;
          }

          try {
            // Create the README file
            const createResponse = await github.rest.repos.createOrUpdateFileContents({
              owner: repoOwner,
              repo: repoName,
              path: '.github/README.md',
              message: 'Add study README with objectives and access instructions',
              content: Buffer.from(readmeContent).toString('base64'),
              committer: {
                name: 'GitHub Action',
                email: 'action@github.com'
              },
              author: {
                name: 'Factory Study System',
                email: 'action@github.com'
              }
            });
            
            console.log('✅ Created .github/README.md for ' + repoName);
            console.log('   File URL: ' + createResponse.data.content.html_url);
            
            core.setOutput('readme_created', 'true');
            
          } catch (error) {
            console.error('Error creating README:', error);
            core.setFailed('Failed to create README: ' + error.message);
          }