name: 'Create Study README'
description: 'Creates .github/README.md for study repository with objectives checklist and access instructions'
inputs:
  repo_name:
    description: 'Study repository name'
    required: true
  study_title:
    description: 'Study title for context'
    required: true
  lead_name:
    description: 'Study lead name'
    required: true
  lead_github:
    description: 'Study lead GitHub username'
    required: true
  factory_issue_number:
    description: 'Factory issue number for status updates'
    required: true
  project_url:
    description: 'Study project URL'
    required: true
  issues_data:
    description: 'JSON array of created status issues data'
    required: true
  org_token:
    description: 'Organization admin token'
    required: true

outputs:
  readme_created:
    description: 'Whether README was successfully created'
    value: ${{ steps.create_readme.outputs.readme_created }}

runs:
  using: 'composite'
  steps:
    - name: Create study README
      id: create_readme
      uses: actions/github-script@v7
      env:
        REPO_NAME: ${{ inputs.repo_name }}
        STUDY_TITLE: ${{ inputs.study_title }}
        LEAD_NAME: ${{ inputs.lead_name }}
        LEAD_GITHUB: ${{ inputs.lead_github }}
        FACTORY_ISSUE_NUMBER: ${{ inputs.factory_issue_number }}
        PROJECT_URL: ${{ inputs.project_url }}
        ISSUES_DATA: ${{ inputs.issues_data }}
        FACTORY_REPO: ${{ github.repository }}
        REPO_OWNER: ${{ github.repository_owner }}
      with:
        github-token: ${{ inputs.org_token }}
        script: |
          const fs = require('fs');
          
          console.log('Starting README creation');
          
          const repoName = process.env.REPO_NAME;
          const studyTitle = process.env.STUDY_TITLE;
          const leadName = process.env.LEAD_NAME;
          const leadGithub = process.env.LEAD_GITHUB;
          const factoryIssueNumber = process.env.FACTORY_ISSUE_NUMBER;
          const projectUrl = process.env.PROJECT_URL;
          const issuesDataJson = process.env.ISSUES_DATA;
          const factoryRepo = process.env.FACTORY_REPO;
          const repoOwner = process.env.REPO_OWNER;
          
          // Parse the issues data
          let issuesData;
          try {
            issuesData = JSON.parse(issuesDataJson);
            console.log('Parsed ' + issuesData.length + ' status issues');
          } catch (parseError) {
            console.error('Failed to parse issues data: ' + parseError.message);
            core.setFailed('Invalid JSON in issues data: ' + parseError.message);
            return;
          }
          
          // Generate objectives checklist with issue links
          const objectivesList = [];
          for (let i = 0; i < issuesData.length; i++) {
            const issue = issuesData[i];
            const line = '- [ ] **' + issue.title + '** #' + issue.number;
            objectivesList.push(line);
          }
          const objectivesChecklist = objectivesList.join('\n');
          
          console.log('Generated objectives checklist with ' + issuesData.length + ' linked issues');
          
          // Read template and process it
          try {
            const template = fs.readFileSync('.github/templates/study-readme.md', 'utf8');
            console.log('Loaded README template');
            
            let readmeContent = template;
            readmeContent = readmeContent.replace(/\{\{STUDY_TITLE\}\}/g, studyTitle);
            readmeContent = readmeContent.replace(/\{\{OBJECTIVES_CHECKLIST\}\}/g, objectivesChecklist);
            readmeContent = readmeContent.replace(/\{\{PROJECT_URL\}\}/g, projectUrl);
            readmeContent = readmeContent.replace(/\{\{FACTORY_ISSUE_NUMBER\}\}/g, factoryIssueNumber);
            readmeContent = readmeContent.replace(/\{\{FACTORY_REPO\}\}/g, factoryRepo);
            readmeContent = readmeContent.replace(/\{\{LEAD_GITHUB\}\}/g, leadGithub);
            readmeContent = readmeContent.replace(/\{\{LEAD_NAME\}\}/g, leadName);
            readmeContent = readmeContent.replace(/\{\{CREATION_DATE\}\}/g, new Date().toISOString().split('T')[0]);
            
            console.log('Processed template with all placeholders');
            
            // Create the README file in the target repository
            const createResponse = await github.rest.repos.createOrUpdateFileContents({
              owner: repoOwner,
              repo: repoName,
              path: '.github/README.md',
              message: 'Add study README with objectives checklist and access instructions',
              content: Buffer.from(readmeContent).toString('base64'),
              committer: {
                name: 'GitHub Action',
                email: 'action@github.com'
              },
              author: {
                name: 'Factory Study System',
                email: 'action@github.com'
              }
            });
            
            console.log('Successfully created .github/README.md');
            console.log('README URL: ' + createResponse.data.content.html_url);
            
            core.setOutput('readme_created', 'true');
            
          } catch (error) {
            console.error('Error creating README: ' + error.message);
            core.setFailed('Failed to create README: ' + error.message);
          }