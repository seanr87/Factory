name: 'Create Status Issues'
description: 'Creates status tracking issues in study repository and assigns them to the project'
inputs:
  repo_name:
    description: 'Study repository name'
    required: true
  study_title:
    description: 'Study title for context'
    required: true
  project_id:
    description: 'Study project ID to assign issues to'
    required: true
  lead_github:
    description: 'Study lead GitHub username for assignment'
    required: true
  factory_issue_number:
    description: 'Factory issue number for status updates'
    required: true
  org_token:
    description: 'Organization admin token'
    required: true

outputs:
  status_issues_created:
    description: 'Number of status issues created'
    value: ${{ steps.create_issues.outputs.issues_created }}
  issue_urls:
    description: 'URLs of created status issues (JSON array)'
    value: ${{ steps.create_issues.outputs.issue_urls }}

runs:
  using: 'composite'
  steps:
    - name: Create status issues
      id: create_issues
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.org_token }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Load status issues configuration
          const configPath = '.github/data/study-status-issues.json';
          const configData = JSON.parse(fs.readFileSync(configPath, 'utf8'));
          
          const repoOwner = "${{ github.repository_owner }}";
          const repoName = "${{ inputs.repo_name }}";
          const studyTitle = "${{ inputs.study_title }}";
          const projectId = "${{ inputs.project_id }}";
          const leadGithub = "${{ inputs.lead_github }}";
          const factoryIssueNumber = "${{ inputs.factory_issue_number }}";
          
          console.log(`Creating ${configData.issues.length} status issues for ${repoName}`);
          console.log(`Target project ID: ${projectId}`);
          console.log(`Study lead: ${leadGithub}`);
          console.log(`Factory issue: ${factoryIssueNumber}`);
          
          const createdIssues = [];
          let issuesCreated = 0;
          
          try {
            // Sort issues by order to ensure proper creation sequence
            const sortedIssues = configData.issues.sort((a, b) => a.order - b.order);
            
            for (const issueConfig of sortedIssues) {
              // Enhanced body with study context and factory link
              const enhancedBody = `${issueConfig.body}\n\n### Study Context\n**Study:** ${studyTitle}\n**Factory Tracking:** https://github.com/${{ github.repository }}/issues/${factoryIssueNumber}\n**Repository:** https://github.com/${repoOwner}/${repoName}\n\n*Created: ${new Date().toISOString().split('T')[0]}*`;

              // Create the issue
              const issueResponse = await github.rest.issues.create({
                owner: repoOwner,
                repo: repoName,
                title: issueConfig.title,
                body: enhancedBody,
                labels: issueConfig.labels || [],
                assignees: [leadGithub]
              });
              
              console.log(`‚úÖ Created issue: ${issueConfig.title}`);
              console.log(`   URL: ${issueResponse.data.html_url}`);
              
              // Add issue to project
              try {
                console.log(`   üîÑ Adding to project: ${projectId}`);
                console.log(`   üîÑ Issue node ID: ${issueResponse.data.node_id}`);
                
                const addResult = await github.graphql(`
                  mutation($projectId: ID!, $contentId: ID!) {
                    addProjectV2ItemById(input: {
                      projectId: $projectId,
                      contentId: $contentId
                    }) {
                      item {
                        id
                      }
                    }
                  }
                `, {
                  projectId: projectId,
                  contentId: issueResponse.data.node_id
                });
                
                const itemId = addResult.addProjectV2ItemById.item.id;
                console.log(`   ‚úÖ Added to project successfully (Item ID: ${itemId})`);
                
                // Set initial status if configured
                if (issueConfig.initial_status) {
                  try {
                    console.log(`   üîÑ Setting initial status to: ${issueConfig.initial_status}`);
                    
                    // Get project fields to find Status field
                    const projectFields = await github.graphql(`
                      query($projectId: ID!) {
                        node(id: $projectId) {
                          ... on ProjectV2 {
                            fields(first: 20) {
                              nodes {
                                ... on ProjectV2SingleSelectField {
                                  id
                                  name
                                  options {
                                    id
                                    name
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    `, { projectId: projectId });
                    
                    const statusField = projectFields.node.fields.nodes.find(field => field.name === 'Status');
                    if (statusField) {
                      const statusOption = statusField.options.find(option => option.name === issueConfig.initial_status);
                      
                      if (statusOption) {
                        await github.graphql(`
                          mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                            updateProjectV2ItemFieldValue(input: {
                              projectId: $projectId,
                              itemId: $itemId,
                              fieldId: $fieldId,
                              value: { singleSelectOptionId: $optionId }
                            }) {
                              projectV2Item {
                                id
                              }
                            }
                          }
                        `, {
                          projectId: projectId,
                          itemId: itemId,
                          fieldId: statusField.id,
                          optionId: statusOption.id
                        });
                        
                        console.log(`   ‚úÖ Set status to: ${issueConfig.initial_status}`);
                      } else {
                        console.log(`   ‚ùå Status option '${issueConfig.initial_status}' not found`);
                      }
                    } else {
                      console.log(`   ‚ùå Status field not found in project`);
                    }
                  } catch (statusError) {
                    console.log(`   ‚ùå Failed to set initial status: ${statusError.message}`);
                  }
                }
                
              } catch (projectError) {
                console.log(`   ‚ùå Failed to add to project: ${projectError.message}`);
                console.log(`   üîç Project ID: ${projectId}`);
                console.log(`   üîç Issue Node ID: ${issueResponse.data.node_id}`);
                console.log(`   üîç Full error:`, projectError);
              }
              
              createdIssues.push({
                number: issueResponse.data.number,
                url: issueResponse.data.html_url,
                title: issueConfig.title,
                order: issueConfig.order,
                factory_objective: issueConfig.factory_objective
              });
              
              issuesCreated++;
              
              // Brief delay between issue creations
              await new Promise(resolve => setTimeout(resolve, 500));
            }
            
            // Sort issues by order for proper display in project
            createdIssues.sort((a, b) => a.order - b.order);
            
            // Create status update webhook workflow in the study repository
            const workflowContent = [
              'name: Status Update Webhook',
              '',
              'on:',
              '  issues:',
              '    types: [closed, edited]',
              '  projects_v2_item:',
              '    types: [edited]',
              '',
              'jobs:',
              '  update-factory-objective:',
              '    uses: ' + repoOwner + '/Factory/.github/workflows/reusable/study-status-webhook.yml@main',
              '    with:',
              '      factory_issue_number: "' + factoryIssueNumber + '"',
              '    secrets:',
              '      FACTORY_ORG_TOKEN: $' + '{{ secrets.FACTORY_ORG_TOKEN }}',
              ''
            ].join('\n');

            try {
              // Create .github/workflows directory structure if it doesn't exist
              await github.rest.repos.createOrUpdateFileContents({
                owner: repoOwner,
                repo: repoName,
                path: '.github/workflows/status-update.yml',
                message: 'Add status update webhook workflow',
                content: Buffer.from(workflowContent).toString('base64'),
                committer: {
                  name: 'GitHub Action',
                  email: 'action@github.com'
                }
              });
              
              console.log('‚úÖ Created status update webhook workflow');
            } catch (workflowError) {
              console.log(`‚ö†Ô∏è Failed to create webhook workflow: ${workflowError.message}`);
            }
            
            console.log(`‚úÖ Successfully created ${issuesCreated} status issues`);
            console.log('Issues created:', createdIssues.map(i => `${i.order}. ${i.title}`).join(', '));
            
            // Set outputs
            core.setOutput('issues_created', issuesCreated.toString());
            core.setOutput('issue_urls', JSON.stringify(createdIssues.map(i => i.url)));
            
          } catch (error) {
            console.error('Error creating status issues:', error);
            core.setFailed(`Failed to create status issues: ${error.message}`);
          }