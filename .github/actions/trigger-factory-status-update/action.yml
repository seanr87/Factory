name: 'Update Factory Objective Field'
description: 'Updates Factory issue Objective field when study status issues change or close'
inputs:
  issue_title:
    description: 'Title of the issue'
    required: true
  issue_url:
    description: 'URL of the issue'
    required: true
  issue_labels:
    description: 'Labels of the issue (JSON array)'
    required: true
  issue_action:
    description: 'GitHub event action (closed, edited, etc.)'
    required: true
  factory_issue_number:
    description: 'Factory issue number to update'
    required: true
  study_repo:
    description: 'Study repository name (owner/repo)'
    required: true
  factory_org_token:
    description: 'Token for Factory repository access'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Check if status tracking issue
      id: check_status
      shell: bash
      run: |
        LABELS='${{ inputs.issue_labels }}'
        if echo "$LABELS" | jq -e '.[] | select(.name == "status-tracking")' > /dev/null; then
          echo "is_status_issue=true" >> $GITHUB_OUTPUT
          echo "‚úÖ This is a status tracking issue"
        else
          echo "is_status_issue=false" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è  Not a status tracking issue, skipping Factory update"
        fi

    - name: Load objective mapping
      id: load_config
      if: steps.check_status.outputs.is_status_issue == 'true'
      shell: bash
      run: |
        # Download objective configuration from Factory repo
        curl -H "Authorization: token ${{ inputs.factory_org_token }}" \
             -H "Accept: application/vnd.github.v3.raw" \
             -o /tmp/objective-config.json \
             "https://api.github.com/repos/${{ github.repository_owner }}/Factory/contents/.github/data/study-status-issues.json"
        
        if [ -f /tmp/objective-config.json ]; then
          echo "‚úÖ Successfully downloaded objective configuration"
        else
          echo "‚ùå Failed to download objective configuration"
          exit 1
        fi

    - name: Determine new objective
      id: determine_objective
      if: steps.check_status.outputs.is_status_issue == 'true'
      shell: bash
      run: |
        ISSUE_TITLE="${{ inputs.issue_title }}"
        ACTION="${{ inputs.issue_action }}"
        
        echo "Processing issue: $ISSUE_TITLE"
        echo "Action: $ACTION"
        
        # Find the current issue's objective
        CURRENT_OBJECTIVE=$(jq -r --arg title "$ISSUE_TITLE" '
          .issues[] | 
          select(.title == $title) | 
          .factory_objective
        ' /tmp/objective-config.json)
        
        # Find the current issue's order
        CURRENT_ORDER=$(jq -r --arg title "$ISSUE_TITLE" '
          .issues[] | 
          select(.title == $title) | 
          .order
        ' /tmp/objective-config.json)
        
        echo "Current objective: $CURRENT_OBJECTIVE"
        echo "Current order: $CURRENT_ORDER"
        
        NEW_OBJECTIVE=""
        
        if [ "$ACTION" = "closed" ]; then
          # Issue closed -> set to next issue's objective
          NEXT_ORDER=$((CURRENT_ORDER + 1))
          NEXT_OBJECTIVE=$(jq -r --arg order "$NEXT_ORDER" '
            .issues[] | 
            select(.order == ($order | tonumber)) | 
            .factory_objective
          ' /tmp/objective-config.json)
          
          if [ "$NEXT_OBJECTIVE" != "null" ] && [ -n "$NEXT_OBJECTIVE" ]; then
            NEW_OBJECTIVE="$NEXT_OBJECTIVE"
          else
            # No next issue, set to Complete
            NEW_OBJECTIVE="Complete"
          fi
          
        elif [ "$ACTION" = "edited" ] || [ "$ACTION" = "synchronized" ]; then
          # For now, we'll assume this is a status change to "In Progress" or "Done"
          # In a real implementation, we'd need to check the project field changes
          # For simplicity, we'll set to the current objective when status changes
          NEW_OBJECTIVE="$CURRENT_OBJECTIVE"
        fi
        
        if [ -n "$NEW_OBJECTIVE" ]; then
          echo "new_objective=$NEW_OBJECTIVE" >> $GITHUB_OUTPUT
          echo "‚úÖ Determined new objective: $NEW_OBJECTIVE"
        else
          echo "new_objective=" >> $GITHUB_OUTPUT
          echo "‚ùå Could not determine new objective"
        fi

    - name: Update Factory Objective field
      if: steps.check_status.outputs.is_status_issue == 'true' && steps.determine_objective.outputs.new_objective != ''
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.factory_org_token }}
      run: |
        echo "üöÄ Updating Factory Objective field..."
        
        gh api repos/${{ github.repository_owner }}/Factory/dispatches \
          --method POST \
          --field event_type='update-factory-objective' \
          --raw-field client_payload='{
            "factory_issue_number": "${{ inputs.factory_issue_number }}",
            "new_objective": "${{ steps.determine_objective.outputs.new_objective }}",
            "study_repo": "${{ inputs.study_repo }}",
            "issue_title": "${{ inputs.issue_title }}",
            "issue_url": "${{ inputs.issue_url }}",
            "issue_action": "${{ inputs.issue_action }}"
          }'
        
        echo "‚úÖ Successfully triggered Factory Objective update"
        echo "   New Objective: ${{ steps.determine_objective.outputs.new_objective }}"
        echo "   Factory Issue: #${{ inputs.factory_issue_number }}"